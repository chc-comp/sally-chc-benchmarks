;; State type:
;;  cx!i!j: channel from process i to relay j
;;  cy!i!j: channel from relay j to process i
;;  good_p!i: true if process i is non-faulty
;;  good_r!j: true if relay k is non-faulty
;;  v!i: result produced by process i
;;  round: global round counter
;;
;; Encoding:
;;  channels store a real value. We encode "nothing sent" as 0.
;;
;; Parameters:
;;  source: id of the source process (integer between 1 and 4)
;;  val: value sent by the source, if its not faulty.
;;  val is assumed non-zero.
;;

(define-state-type state
  ((cx!0!0 Real)
   (cx!0!1 Real)
   (cx!0!2 Real)
   (cx!0!3 Real)
   (cx!0!4 Real)
   (cx!0!5 Real)
   (cx!1!0 Real)
   (cx!1!1 Real)
   (cx!1!2 Real)
   (cx!1!3 Real)
   (cx!1!4 Real)
   (cx!1!5 Real)
   (cx!2!0 Real)
   (cx!2!1 Real)
   (cx!2!2 Real)
   (cx!2!3 Real)
   (cx!2!4 Real)
   (cx!2!5 Real)
   (cx!3!0 Real)
   (cx!3!1 Real)
   (cx!3!2 Real)
   (cx!3!3 Real)
   (cx!3!4 Real)
   (cx!3!5 Real)
   (cx!4!0 Real)
   (cx!4!1 Real)
   (cx!4!2 Real)
   (cx!4!3 Real)
   (cx!4!4 Real)
   (cx!4!5 Real)
   (cy!0!0 Real)
   (cy!0!1 Real)
   (cy!0!2 Real)
   (cy!0!3 Real)
   (cy!0!4 Real)
   (cy!0!5 Real)
   (cy!1!0 Real)
   (cy!1!1 Real)
   (cy!1!2 Real)
   (cy!1!3 Real)
   (cy!1!4 Real)
   (cy!1!5 Real)
   (cy!2!0 Real)
   (cy!2!1 Real)
   (cy!2!2 Real)
   (cy!2!3 Real)
   (cy!2!4 Real)
   (cy!2!5 Real)
   (cy!3!0 Real)
   (cy!3!1 Real)
   (cy!3!2 Real)
   (cy!3!3 Real)
   (cy!3!4 Real)
   (cy!3!5 Real)
   (cy!4!0 Real)
   (cy!4!1 Real)
   (cy!4!2 Real)
   (cy!4!3 Real)
   (cy!4!4 Real)
   (cy!4!5 Real)
   (good_p!0 Bool)
   (good_p!1 Bool)
   (good_p!2 Bool)
   (good_p!3 Bool)
   (good_p!4 Bool)
   (good_r!0 Bool)
   (good_r!1 Bool)
   (good_r!2 Bool)
   (good_r!3 Bool)
   (good_r!4 Bool)
   (good_r!5 Bool)
   (v!0 Real)
   (v!1 Real)
   (v!2 Real)
   (v!3 Real)
   (v!4 Real)
   (round Real)
   ;; parameters
   (source Real)
   (val Real)))

;;
;; Initial states
;;
(define-states init state
  (and
   (= round 0)
   (= cx!0!0 0)
   (= cx!0!1 0)
   (= cx!0!2 0)
   (= cx!0!3 0)
   (= cx!0!4 0)
   (= cx!0!5 0)
   (= cx!1!0 0)
   (= cx!1!1 0)
   (= cx!1!2 0)
   (= cx!1!3 0)
   (= cx!1!4 0)
   (= cx!1!5 0)
   (= cx!2!0 0)
   (= cx!2!1 0)
   (= cx!2!2 0)
   (= cx!2!3 0)
   (= cx!2!4 0)
   (= cx!2!5 0)
   (= cx!3!0 0)
   (= cx!3!1 0)
   (= cx!3!2 0)
   (= cx!3!3 0)
   (= cx!3!4 0)
   (= cx!3!5 0)
   (= cx!4!0 0)
   (= cx!4!1 0)
   (= cx!4!2 0)
   (= cx!4!3 0)
   (= cx!4!4 0)
   (= cx!4!5 0)
   (= cy!0!0 0)
   (= cy!0!1 0)
   (= cy!0!2 0)
   (= cy!0!3 0)
   (= cy!0!4 0)
   (= cy!0!5 0)
   (= cy!1!0 0)
   (= cy!1!1 0)
   (= cy!1!2 0)
   (= cy!1!3 0)
   (= cy!1!4 0)
   (= cy!1!5 0)
   (= cy!2!0 0)
   (= cy!2!1 0)
   (= cy!2!2 0)
   (= cy!2!3 0)
   (= cy!2!4 0)
   (= cy!2!5 0)
   (= cy!3!0 0)
   (= cy!3!1 0)
   (= cy!3!2 0)
   (= cy!3!3 0)
   (= cy!3!4 0)
   (= cy!3!5 0)
   (= cy!4!0 0)
   (= cy!4!1 0)
   (= cy!4!2 0)
   (= cy!4!3 0)
   (= cy!4!4 0)
   (= cy!4!5 0)
   ;;
   ;; Constraints on val and source
   ;;
   (or (= source 1) (= source 2) (= source 3) (= source 4) (= source 5))
   (not (= val 0))
   ;;
   ;; Fault model
   ;;
   (and good_p!0 good_p!1 good_p!2 good_p!3 good_p!4)
   (or
    (and
     (not good_r!0)
     good_r!1
     good_r!2
     good_r!3
     good_r!4
     good_r!5)
    (and
     (not good_r!1)
     good_r!0
     good_r!2
     good_r!3
     good_r!4
     good_r!5)
    (and
     (not good_r!2)
     good_r!0
     good_r!1
     good_r!3
     good_r!4
     good_r!5)
    (and
     (not good_r!3)
     good_r!0
     good_r!1
     good_r!2
     good_r!4
     good_r!5)
    (and
     (not good_r!4)
     good_r!0
     good_r!1
     good_r!2
     good_r!3
     good_r!5)
    (and
     (not good_r!5)
     good_r!0
     good_r!1
     good_r!2
     good_r!3
     good_r!4))))

;;
;; Transition relation
;; 
(define-transition trans state
  (let ((cond!1 (= source 2))
	(cond!2 (= source 3))
	(cond!3 (= source 4))
	(cond!4 (= source 5))
	(cs!458 (not good_r!1))
	(cs!460 (not good_r!2))
	(cs!462 (not good_r!3))
	(cs!464 (not good_r!4))
	(cs!490 (not good_r!5))
	(cs!498 (not good_p!0))
	(cs!505 (not good_p!1))
	(cs!512 (not good_p!2))
	(cs!519 (not good_p!3))
	(cs!526 (not good_p!4))
	(cs!533
	 (and
	  (= cx!0!0' cx!0!0)
	  (= cx!0!1' cx!0!1)
	  (= cx!0!2' cx!0!2)
	  (= cx!0!3' cx!0!3)
	  (= cx!0!4' cx!0!4)
	  (= cx!0!5' cx!0!5)
	  (= cx!1!0' cx!1!0)
	  (= cx!1!1' cx!1!1)
	  (= cx!1!2' cx!1!2)
	  (= cx!1!3' cx!1!3)
	  (= cx!1!4' cx!1!4)
	  (= cx!1!5' cx!1!5)
	  (= cx!2!0' cx!2!0)
	  (= cx!2!1' cx!2!1)
	  (= cx!2!2' cx!2!2)
	  (= cx!2!3' cx!2!3)
	  (= cx!2!4' cx!2!4)
	  (= cx!2!5' cx!2!5)
	  (= cx!3!0' cx!3!0)
	  (= cx!3!1' cx!3!1)
	  (= cx!3!2' cx!3!2)
	  (= cx!3!3' cx!3!3)
	  (= cx!3!4' cx!3!4)
	  (= cx!3!5' cx!3!5)
	  (= cx!4!0' cx!4!0)
	  (= cx!4!1' cx!4!1)
	  (= cx!4!2' cx!4!2)
	  (= cx!4!3' cx!4!3)
	  (= cx!4!4' cx!4!4)
	  (= cx!4!5' cx!4!5)))
	(cs!534
	 (and
	  (= cy!0!0' cy!0!0)
	  (= cy!0!1' cy!0!1)
	  (= cy!0!2' cy!0!2)
	  (= cy!0!3' cy!0!3)
	  (= cy!0!4' cy!0!4)
	  (= cy!0!5' cy!0!5)
	  (= cy!1!0' cy!1!0)
	  (= cy!1!1' cy!1!1)
	  (= cy!1!2' cy!1!2)
	  (= cy!1!3' cy!1!3)
	  (= cy!1!4' cy!1!4)
	  (= cy!1!5' cy!1!5)
	  (= cy!2!0' cy!2!0)
	  (= cy!2!1' cy!2!1)
	  (= cy!2!2' cy!2!2)
	  (= cy!2!3' cy!2!3)
	  (= cy!2!4' cy!2!4)
	  (= cy!2!5' cy!2!5)
	  (= cy!3!0' cy!3!0)
	  (= cy!3!1' cy!3!1)
	  (= cy!3!2' cy!3!2)
	  (= cy!3!3' cy!3!3)
	  (= cy!3!4' cy!3!4)
	  (= cy!3!5' cy!3!5)
	  (= cy!4!0' cy!4!0)
	  (= cy!4!1' cy!4!1)
	  (= cy!4!2' cy!4!2)
	  (= cy!4!3' cy!4!3)
	  (= cy!4!4' cy!4!4)
	  (= cy!4!5' cy!4!5)))
	(cs!535
	 (and
	  (= good_p!0' good_p!0)
	  (= good_p!1' good_p!1)
	  (= good_p!2' good_p!2)
	  (= good_p!3' good_p!3)
	  (= good_p!4' good_p!4)))
	(cs!536
	 (and
	  (= good_r!0' good_r!0)
	  (= good_r!1' good_r!1)
	  (= good_r!2' good_r!2)
	  (= good_r!3' good_r!3)
	  (= good_r!4' good_r!4)
	  (= good_r!5' good_r!5)))
	(cs!537
	 (and
	  (= v!0' v!0)
	  (= v!1' v!1)
	  (= v!2' v!2)
	  (= v!3' v!3)
	  (= v!4' v!4)))
	(cs!568 (not good_r!0)))
    (let ((cs!459
	   (cond
	    (cond!4 cx!4!1)
	    (cond!3 cx!3!1)
	    (cond!2 cx!2!1)
	    (cond!1 cx!1!1)
	    (else cx!0!1)))
	  (cs!461
	   (cond
	    (cond!4 cx!4!2)
	    (cond!3 cx!3!2)
	    (cond!2 cx!2!2)
	    (cond!1 cx!1!2)
	    (else cx!0!2)))
	  (cs!463
	   (cond
	    (cond!4 cx!4!3)
	    (cond!3 cx!3!3)
	    (cond!2 cx!2!3)
	    (cond!1 cx!1!3)
	    (else cx!0!3)))
	  (cs!465
	   (cond
	    (cond!4 cx!4!4)
	    (cond!3 cx!3!4)
	    (cond!2 cx!2!4)
	    (cond!1 cx!1!4)
	    (else cx!0!4)))
	  (cs!497
	   (cond
	    (cond!4 cx!4!5)
	    (cond!3 cx!3!5)
	    (cond!2 cx!2!5)
	    (cond!1 cx!1!5)
	    (else cx!0!5)))
	  (cs!569
	   (cond
	    (cond!4 cx!4!0)
	    (cond!3 cx!3!0)
	    (cond!2 cx!2!0)
	    (cond!1 cx!1!0)
	    (else cx!0!0))))
      (let ((new_k!13 (ite (= cy!0!4 cy!0!5) 2 0))
	    (new_k!21 (ite (= cy!1!4 cy!1!5) 2 0))
	    (new_k!29 (ite (= cy!2!4 cy!2!5) 2 0))
	    (new_k!37 (ite (= cy!3!4 cy!3!5) 2 0))
	    (new_k!45 (ite (= cy!4!4 cy!4!5) 2 0)))
	(let ((cs!570 (= new_k!13 0))
	      (cs!573 (= new_k!21 0))
	      (cs!576 (= new_k!29 0))
	      (cs!579 (= new_k!37 0))
	      (cs!582 (= new_k!45 0)))
	  (let ((new_k!14
		 (cond
		  (cs!570 1)
		  ((= cy!0!3 cy!0!5) (+ new_k!13 1))
		  (else (- new_k!13 1))))
		(new_x!7 (ite cs!570 cy!0!3 cy!0!5))
		(new_k!22
		 (cond
		  (cs!573 1)
		  ((= cy!1!3 cy!1!5) (+ new_k!21 1))
		  (else (- new_k!21 1))))
		(new_x!9 (ite cs!573 cy!1!3 cy!1!5))
		(new_k!30
		 (cond
		  (cs!576 1)
		  ((= cy!2!3 cy!2!5) (+ new_k!29 1))
		  (else (- new_k!29 1))))
		(new_x!11 (ite cs!576 cy!2!3 cy!2!5))
		(new_k!38
		 (cond
		  (cs!579 1)
		  ((= cy!3!3 cy!3!5) (+ new_k!37 1))
		  (else (- new_k!37 1))))
		(new_x!13 (ite cs!579 cy!3!3 cy!3!5))
		(new_k!46
		 (cond
		  (cs!582 1)
		  ((= cy!4!3 cy!4!5) (+ new_k!45 1))
		  (else (- new_k!45 1))))
		(new_x!15 (ite cs!582 cy!4!3 cy!4!5)))
	    (let ((cs!571 (= new_k!14 0))
		  (cs!574 (= new_k!22 0))
		  (cs!577 (= new_k!30 0))
		  (cs!580 (= new_k!38 0))
		  (cs!583 (= new_k!46 0)))
	      (let ((new_k!15
		     (cond
		      (cs!571 1)
		      ((= cy!0!2 new_x!7) (+ new_k!14 1))
		      (else (- new_k!14 1))))
		    (new_x!8 (ite cs!571 cy!0!2 new_x!7))
		    (new_k!23
		     (cond
		      (cs!574 1)
		      ((= cy!1!2 new_x!9) (+ new_k!22 1))
		      (else (- new_k!22 1))))
		    (new_x!10 (ite cs!574 cy!1!2 new_x!9))
		    (new_k!31
		     (cond
		      (cs!577 1)
		      ((= cy!2!2 new_x!11) (+ new_k!30 1))
		      (else (- new_k!30 1))))
		    (new_x!12 (ite cs!577 cy!2!2 new_x!11))
		    (new_k!39
		     (cond
		      (cs!580 1)
		      ((= cy!3!2 new_x!13) (+ new_k!38 1))
		      (else (- new_k!38 1))))
		    (new_x!14 (ite cs!580 cy!3!2 new_x!13))
		    (new_k!47
		     (cond
		      (cs!583 1)
		      ((= cy!4!2 new_x!15) (+ new_k!46 1))
		      (else (- new_k!46 1))))
		    (new_x!16 (ite cs!583 cy!4!2 new_x!15)))
		(let ((cs!572 (= new_k!15 0))
		      (cs!575 (= new_k!23 0))
		      (cs!578 (= new_k!31 0))
		      (cs!581 (= new_k!39 0))
		      (cs!584 (= new_k!47 0)))
		  (let ((x!16
			 (cond
			  ((=
			    (cond
			     (cs!572 1)
			     ((= cy!0!1 new_x!8) (+ new_k!15 1))
			     (else (- new_k!15 1)))
			    0)
			   cy!0!0)
			  (cs!572 cy!0!1)
			  (else new_x!8)))
			(x!17
			 (cond
			  ((=
			    (cond
			     (cs!575 1)
			     ((= cy!1!1 new_x!10) (+ new_k!23 1))
			     (else (- new_k!23 1)))
			    0)
			   cy!1!0)
			  (cs!575 cy!1!1)
			  (else new_x!10)))
			(x!18
			 (cond
			  ((=
			    (cond
			     (cs!578 1)
			     ((= cy!2!1 new_x!12) (+ new_k!31 1))
			     (else (- new_k!31 1)))
			    0)
			   cy!2!0)
			  (cs!578 cy!2!1)
			  (else new_x!12)))
			(x!19
			 (cond
			  ((=
			    (cond
			     (cs!581 1)
			     ((= cy!3!1 new_x!14) (+ new_k!39 1))
			     (else (- new_k!39 1)))
			    0)
			   cy!3!0)
			  (cs!581 cy!3!1)
			  (else new_x!14)))
			(x!20
			 (cond
			  ((=
			    (cond
			     (cs!584 1)
			     ((= cy!4!1 new_x!16) (+ new_k!47 1))
			     (else (- new_k!47 1)))
			    0)
			   cy!4!0)
			  (cs!584 cy!4!1)
			  (else new_x!16))))
		    (let ((new_k!16 (ite (= cy!0!5 x!16) 3 4))
			  (new_k!24 (ite (= cy!1!5 x!17) 3 4))
			  (new_k!32 (ite (= cy!2!5 x!18) 3 4))
			  (new_k!40 (ite (= cy!3!5 x!19) 3 4))
			  (new_k!48 (ite (= cy!4!5 x!20) 3 4)))
		      (let ((new_k!17
			     (ite (= cy!0!4 x!16) (- new_k!16 1) new_k!16))
			    (new_k!25 (ite (= cy!1!4 x!17) (- new_k!24 1) new_k!24))
			    (new_k!33 (ite (= cy!2!4 x!18) (- new_k!32 1) new_k!32))
			    (new_k!41 (ite (= cy!3!4 x!19) (- new_k!40 1) new_k!40))
			    (new_k!49
			     (ite (= cy!4!4 x!20) (- new_k!48 1) new_k!48)))
			(let ((new_k!18
			       (ite (= cy!0!3 x!16) (- new_k!17 1) new_k!17))
			      (new_k!26 (ite (= cy!1!3 x!17) (- new_k!25 1) new_k!25))
			      (new_k!34 (ite (= cy!2!3 x!18) (- new_k!33 1) new_k!33))
			      (new_k!42 (ite (= cy!3!3 x!19) (- new_k!41 1) new_k!41))
			      (new_k!50
			       (ite (= cy!4!3 x!20) (- new_k!49 1) new_k!49)))
			  (let ((new_k!19
				 (ite (= cy!0!2 x!16) (- new_k!18 1) new_k!18))
				(new_k!27 (ite (= cy!1!2 x!17) (- new_k!26 1) new_k!26))
				(new_k!35 (ite (= cy!2!2 x!18) (- new_k!34 1) new_k!34))
				(new_k!43 (ite (= cy!3!2 x!19) (- new_k!42 1) new_k!42))
				(new_k!51
				 (ite (= cy!4!2 x!20) (- new_k!50 1) new_k!50)))
			    (let ((new_k!20
				   (ite (= cy!0!1 x!16) (- new_k!19 1) new_k!19))
				  (new_k!28 (ite (= cy!1!1 x!17) (- new_k!27 1) new_k!27))
				  (new_k!36 (ite (= cy!2!1 x!18) (- new_k!35 1) new_k!35))
				  (new_k!44 (ite (= cy!3!1 x!19) (- new_k!43 1) new_k!43))
				  (new_k!52
				   (ite (= cy!4!1 x!20) (- new_k!51 1) new_k!51)))
			      (and
			       (= source' source)
			       (= val' val)
			       (or
				(and
				 (= round 0)
				 (and
				  (or
				   cs!498
				   (/= 1 source)
				   (and
				    (= cx!0!0' val)
				    (= cx!0!1' val)
				    (= cx!0!2' val)
				    (= cx!0!3' val)
				    (= cx!0!4' val)
				    (= cx!0!5' val)))
				  (or
				   cs!505
				   (/= 2 source)
				   (and
				    (= cx!1!0' val)
				    (= cx!1!1' val)
				    (= cx!1!2' val)
				    (= cx!1!3' val)
				    (= cx!1!4' val)
				    (= cx!1!5' val)))
				  (or
				   cs!512
				   (/= 3 source)
				   (and
				    (= cx!2!0' val)
				    (= cx!2!1' val)
				    (= cx!2!2' val)
				    (= cx!2!3' val)
				    (= cx!2!4' val)
				    (= cx!2!5' val)))
				  (or
				   cs!519
				   (/= 4 source)
				   (and
				    (= cx!3!0' val)
				    (= cx!3!1' val)
				    (= cx!3!2' val)
				    (= cx!3!3' val)
				    (= cx!3!4' val)
				    (= cx!3!5' val)))
				  (or
				   cs!526
				   (/= 5 source)
				   (and
				    (= cx!4!0' val)
				    (= cx!4!1' val)
				    (= cx!4!2' val)
				    (= cx!4!3' val)
				    (= cx!4!4' val)
				    (= cx!4!5' val)))
				  (or
				   cs!498
				   (= 1 source)
				   (and
				    (= cx!0!0' 0)
				    (= cx!0!1' 0)
				    (= cx!0!2' 0)
				    (= cx!0!3' 0)
				    (= cx!0!4' 0)
				    (= cx!0!5' 0)))
				  (or
				   cs!505
				   (= 2 source)
				   (and
				    (= cx!1!0' 0)
				    (= cx!1!1' 0)
				    (= cx!1!2' 0)
				    (= cx!1!3' 0)
				    (= cx!1!4' 0)
				    (= cx!1!5' 0)))
				  (or
				   cs!512
				   (= 3 source)
				   (and
				    (= cx!2!0' 0)
				    (= cx!2!1' 0)
				    (= cx!2!2' 0)
				    (= cx!2!3' 0)
				    (= cx!2!4' 0)
				    (= cx!2!5' 0)))
				  (or
				   cs!519
				   (= 4 source)
				   (and
				    (= cx!3!0' 0)
				    (= cx!3!1' 0)
				    (= cx!3!2' 0)
				    (= cx!3!3' 0)
				    (= cx!3!4' 0)
				    (= cx!3!5' 0)))
				  (or
				   cs!526
				   (= 5 source)
				   (and
				    (= cx!4!0' 0)
				    (= cx!4!1' 0)
				    (= cx!4!2' 0)
				    (= cx!4!3' 0)
				    (= cx!4!4' 0)
				    (= cx!4!5' 0))))
				 (= round' 1)
				 cs!534
				 cs!535
				 cs!536
				 cs!537)
				(and
				 (= round 1)
				 (and
				  (or cs!568 (= cy!0!0' cs!569))
				  (or cs!568 (= cy!1!0' cs!569))
				  (or cs!568 (= cy!2!0' cs!569))
				  (or cs!568 (= cy!3!0' cs!569))
				  (or cs!568 (= cy!4!0' cs!569))
				  (or cs!458 (= cy!0!1' cs!459))
				  (or cs!458 (= cy!1!1' cs!459))
				  (or cs!458 (= cy!2!1' cs!459))
				  (or cs!458 (= cy!3!1' cs!459))
				  (or cs!458 (= cy!4!1' cs!459))
				  (or cs!460 (= cy!0!2' cs!461))
				  (or cs!460 (= cy!1!2' cs!461))
				  (or cs!460 (= cy!2!2' cs!461))
				  (or cs!460 (= cy!3!2' cs!461))
				  (or cs!460 (= cy!4!2' cs!461))
				  (or cs!462 (= cy!0!3' cs!463))
				  (or cs!462 (= cy!1!3' cs!463))
				  (or cs!462 (= cy!2!3' cs!463))
				  (or cs!462 (= cy!3!3' cs!463))
				  (or cs!462 (= cy!4!3' cs!463))
				  (or cs!464 (= cy!0!4' cs!465))
				  (or cs!464 (= cy!1!4' cs!465))
				  (or cs!464 (= cy!2!4' cs!465))
				  (or cs!464 (= cy!3!4' cs!465))
				  (or cs!464 (= cy!4!4' cs!465))
				  (or cs!490 (= cy!0!5' cs!497))
				  (or cs!490 (= cy!1!5' cs!497))
				  (or cs!490 (= cy!2!5' cs!497))
				  (or cs!490 (= cy!3!5' cs!497))
				  (or cs!490 (= cy!4!5' cs!497)))
				 (= round' 2)
				 cs!533
				 cs!535
				 cs!536
				 cs!537)
				(and
				 (= round 2)
				 (and
				  (or
				   cs!498
				   (=
				    v!0'
				    (ite (or
					  (= new_k!16 0)
					  (= new_k!17 0)
					  (= new_k!18 0)
					  (= new_k!19 0)
					  (= new_k!20 0)
					  (= (ite (= cy!0!0 x!16) (- new_k!20 1) new_k!20) 0))
					 x!16
					 0)))
				  (or
				   cs!505
				   (=
				    v!1'
				    (ite (or
					  (= new_k!24 0)
					  (= new_k!25 0)
					  (= new_k!26 0)
					  (= new_k!27 0)
					  (= new_k!28 0)
					  (= (ite (= cy!1!0 x!17) (- new_k!28 1) new_k!28) 0))
					 x!17
					 0)))
				  (or
				   cs!512
				   (=
				    v!2'
				    (ite (or
					  (= new_k!32 0)
					  (= new_k!33 0)
					  (= new_k!34 0)
					  (= new_k!35 0)
					  (= new_k!36 0)
					  (= (ite (= cy!2!0 x!18) (- new_k!36 1) new_k!36) 0))
					 x!18
					 0)))
				  (or
				   cs!519
				   (=
				    v!3'
				    (ite (or
					  (= new_k!40 0)
					  (= new_k!41 0)
					  (= new_k!42 0)
					  (= new_k!43 0)
					  (= new_k!44 0)
					  (= (ite (= cy!3!0 x!19) (- new_k!44 1) new_k!44) 0))
					 x!19
					 0)))
				  (or
				   cs!526
				   (=
				    v!4'
				    (ite (or
					  (= new_k!48 0)
					  (= new_k!49 0)
					  (= new_k!50 0)
					  (= new_k!51 0)
					  (= new_k!52 0)
					  (= (ite (= cy!4!0 x!20) (- new_k!52 1) new_k!52) 0))
					 x!20
					 0))))
				 (= round' 3)
				 cs!533
				 cs!534
				 cs!535
				 cs!536)
				(and
				 (= round 3)
				 cs!533
				 cs!534
				 cs!535
				 cs!536
				 (= round' round)
				 cs!537))))))))))))))))))

;;
;; Transition system
;;
(define-transition-system OM
  state
  init
  trans
)

;;
;; Query: agreement
;;
(query OM
      (or
        (< round 3)
        (and
          (or
            (not good_p!0)
            (and
              (or (not good_p!1) (= v!0 v!1))
              (or (not good_p!2) (= v!0 v!2))
              (or (not good_p!3) (= v!0 v!3))
              (or (not good_p!4) (= v!0 v!4))))
          (or
            (not good_p!1)
            (and
              (or (not good_p!0) (= v!1 v!0))
              (or (not good_p!2) (= v!1 v!2))
              (or (not good_p!3) (= v!1 v!3))
              (or (not good_p!4) (= v!1 v!4))))
          (or
            (not good_p!2)
            (and
              (or (not good_p!0) (= v!2 v!0))
              (or (not good_p!1) (= v!2 v!1))
              (or (not good_p!3) (= v!2 v!3))
              (or (not good_p!4) (= v!2 v!4))))
          (or
            (not good_p!3)
            (and
              (or (not good_p!0) (= v!3 v!0))
              (or (not good_p!1) (= v!3 v!1))
              (or (not good_p!2) (= v!3 v!2))
              (or (not good_p!4) (= v!3 v!4))))
          (or
            (not good_p!4)
            (and
              (or (not good_p!0) (= v!4 v!0))
              (or (not good_p!1) (= v!4 v!1))
              (or (not good_p!2) (= v!4 v!2))
              (or (not good_p!3) (= v!4 v!3)))))))

