;; State type:
;;  cx!i!j: channel from process i to relay j
;;  cy!i!j: channel from relay j to process i
;;  good_p!i: true if process i is non-faulty
;;  good_r!j: true if relay k is non-faulty
;;  v!i: result produced by process i
;;  round: global round counter
;;
;; Encoding:
;;  channels store a real value. We encode "nothing sent" as 0.
;;
;; Parameters:
;;  source: id of the source process (integer between 1 and 4)
;;  val: value sent by the source, if its not faulty.
;;  val is assumed non-zero.
;;

(define-state-type state
  ((cx!0!0 Real)
   (cx!0!1 Real)
   (cx!0!2 Real)
   (cx!0!3 Real)
   (cx!0!4 Real)
   (cx!0!5 Real)
   (cx!1!0 Real)
   (cx!1!1 Real)
   (cx!1!2 Real)
   (cx!1!3 Real)
   (cx!1!4 Real)
   (cx!1!5 Real)
   (cx!2!0 Real)
   (cx!2!1 Real)
   (cx!2!2 Real)
   (cx!2!3 Real)
   (cx!2!4 Real)
   (cx!2!5 Real)
   (cx!3!0 Real)
   (cx!3!1 Real)
   (cx!3!2 Real)
   (cx!3!3 Real)
   (cx!3!4 Real)
   (cx!3!5 Real)
   (cy!0!0 Real)
   (cy!0!1 Real)
   (cy!0!2 Real)
   (cy!0!3 Real)
   (cy!0!4 Real)
   (cy!0!5 Real)
   (cy!1!0 Real)
   (cy!1!1 Real)
   (cy!1!2 Real)
   (cy!1!3 Real)
   (cy!1!4 Real)
   (cy!1!5 Real)
   (cy!2!0 Real)
   (cy!2!1 Real)
   (cy!2!2 Real)
   (cy!2!3 Real)
   (cy!2!4 Real)
   (cy!2!5 Real)
   (cy!3!0 Real)
   (cy!3!1 Real)
   (cy!3!2 Real)
   (cy!3!3 Real)
   (cy!3!4 Real)
   (cy!3!5 Real)
   (good_p!0 Bool)
   (good_p!1 Bool)
   (good_p!2 Bool)
   (good_p!3 Bool)
   (good_r!0 Bool)
   (good_r!1 Bool)
   (good_r!2 Bool)
   (good_r!3 Bool)
   (good_r!4 Bool)
   (good_r!5 Bool)
   (v!0 Real)
   (v!1 Real)
   (v!2 Real)
   (v!3 Real)
   (round Real)
   ;; parameters
   (source Real)
   (val Real)))


;;
;; Initial states
;;
(define-states init state
  (and
   (= round 0)
   (= cx!0!0 0)
   (= cx!0!1 0)
   (= cx!0!2 0)
   (= cx!0!3 0)
   (= cx!0!4 0)
   (= cx!0!5 0)
   (= cx!1!0 0)
   (= cx!1!1 0)
   (= cx!1!2 0)
   (= cx!1!3 0)
   (= cx!1!4 0)
   (= cx!1!5 0)
   (= cx!2!0 0)
   (= cx!2!1 0)
   (= cx!2!2 0)
   (= cx!2!3 0)
   (= cx!2!4 0)
   (= cx!2!5 0)
   (= cx!3!0 0)
   (= cx!3!1 0)
   (= cx!3!2 0)
   (= cx!3!3 0)
   (= cx!3!4 0)
   (= cx!3!5 0)
   (= cy!0!0 0)
   (= cy!0!1 0)
   (= cy!0!2 0)
   (= cy!0!3 0)
   (= cy!0!4 0)
   (= cy!0!5 0)
   (= cy!1!0 0)
   (= cy!1!1 0)
   (= cy!1!2 0)
   (= cy!1!3 0)
   (= cy!1!4 0)
   (= cy!1!5 0)
   (= cy!2!0 0)
   (= cy!2!1 0)
   (= cy!2!2 0)
   (= cy!2!3 0)
   (= cy!2!4 0)
   (= cy!2!5 0)
   (= cy!3!0 0)
   (= cy!3!1 0)
   (= cy!3!2 0)
   (= cy!3!3 0)
   (= cy!3!4 0)
   (= cy!3!5 0)
   ;;
   ;; Constraints on val and source
   ;;
   (or (= source 1) (= source 2) (= source 3) (= source 4))
   (not (= val 0))
   ;;
   ;; Fault model
   ;;
   (and good_p!0 good_p!1 good_p!2 good_p!3)
   (or
    (and
     (not good_r!0)
     good_r!1
     good_r!2
     good_r!3
     good_r!4
     good_r!5)
    (and
     (not good_r!1)
     good_r!0
     good_r!2
     good_r!3
     good_r!4
     good_r!5)
    (and
     (not good_r!2)
     good_r!0
     good_r!1
     good_r!3
     good_r!4
     good_r!5)
    (and
     (not good_r!3)
     good_r!0
     good_r!1
     good_r!2
     good_r!4
     good_r!5)
    (and
     (not good_r!4)
     good_r!0
     good_r!1
     good_r!2
     good_r!3
     good_r!5)
    (and
     (not good_r!5)
     good_r!0
     good_r!1
     good_r!2
     good_r!3
     good_r!4))))


;;
;; Transition relation
;; 
(define-transition trans state
  (let ((cond!1 (= source 2))
	(cond!2 (= source 3))
	(cond!3 (= source 4))
	(cs!380 (not good_r!3))
	(cs!382 (not good_r!4))
	(cs!402 (not good_r!5))
	(cs!410 (not good_p!0))
	(cs!417 (not good_p!1))
	(cs!424 (not good_p!2))
	(cs!431 (not good_p!3))
	(cs!438
	 (and
	  (= cx!0!0' cx!0!0)
	  (= cx!0!1' cx!0!1)
	  (= cx!0!2' cx!0!2)
	  (= cx!0!3' cx!0!3)
	  (= cx!0!4' cx!0!4)
	  (= cx!0!5' cx!0!5)
	  (= cx!1!0' cx!1!0)
	  (= cx!1!1' cx!1!1)
	  (= cx!1!2' cx!1!2)
	  (= cx!1!3' cx!1!3)
	  (= cx!1!4' cx!1!4)
	  (= cx!1!5' cx!1!5)
	  (= cx!2!0' cx!2!0)
	  (= cx!2!1' cx!2!1)
	  (= cx!2!2' cx!2!2)
	  (= cx!2!3' cx!2!3)
	  (= cx!2!4' cx!2!4)
	  (= cx!2!5' cx!2!5)
	  (= cx!3!0' cx!3!0)
	  (= cx!3!1' cx!3!1)
	  (= cx!3!2' cx!3!2)
	  (= cx!3!3' cx!3!3)
	  (= cx!3!4' cx!3!4)
	  (= cx!3!5' cx!3!5)))
	(cs!439
	 (and
	  (= cy!0!0' cy!0!0)
	  (= cy!0!1' cy!0!1)
	  (= cy!0!2' cy!0!2)
	  (= cy!0!3' cy!0!3)
	  (= cy!0!4' cy!0!4)
	  (= cy!0!5' cy!0!5)
	  (= cy!1!0' cy!1!0)
	  (= cy!1!1' cy!1!1)
	  (= cy!1!2' cy!1!2)
	  (= cy!1!3' cy!1!3)
	  (= cy!1!4' cy!1!4)
	  (= cy!1!5' cy!1!5)
	  (= cy!2!0' cy!2!0)
	  (= cy!2!1' cy!2!1)
	  (= cy!2!2' cy!2!2)
	  (= cy!2!3' cy!2!3)
	  (= cy!2!4' cy!2!4)
	  (= cy!2!5' cy!2!5)
	  (= cy!3!0' cy!3!0)
	  (= cy!3!1' cy!3!1)
	  (= cy!3!2' cy!3!2)
	  (= cy!3!3' cy!3!3)
	  (= cy!3!4' cy!3!4)
	  (= cy!3!5' cy!3!5)))
	(cs!440
	 (and
	  (= good_p!0' good_p!0)
	  (= good_p!1' good_p!1)
	  (= good_p!2' good_p!2)
	  (= good_p!3' good_p!3)))
	(cs!441
	 (and
	  (= good_r!0' good_r!0)
	  (= good_r!1' good_r!1)
	  (= good_r!2' good_r!2)
	  (= good_r!3' good_r!3)
	  (= good_r!4' good_r!4)
	  (= good_r!5' good_r!5)))
	(cs!442
	 (and (= v!0' v!0) (= v!1' v!1) (= v!2' v!2) (= v!3' v!3)))
	(cs!467 (not good_r!0))
	(cs!469 (not good_r!1))
	(cs!471 (not good_r!2)))
    (let ((cs!381
	   (cond
	    (cond!3 cx!3!3)
	    (cond!2 cx!2!3)
	    (cond!1 cx!1!3)
	    (else cx!0!3)))
	  (cs!383
	   (cond
	    (cond!3 cx!3!4)
	    (cond!2 cx!2!4)
	    (cond!1 cx!1!4)
	    (else cx!0!4)))
	  (cs!409
	   (cond
	    (cond!3 cx!3!5)
	    (cond!2 cx!2!5)
	    (cond!1 cx!1!5)
	    (else cx!0!5)))
	  (cs!468
	   (cond
	    (cond!3 cx!3!0)
	    (cond!2 cx!2!0)
	    (cond!1 cx!1!0)
	    (else cx!0!0)))
	  (cs!470
	   (cond
	    (cond!3 cx!3!1)
	    (cond!2 cx!2!1)
	    (cond!1 cx!1!1)
	    (else cx!0!1)))
	  (cs!472
	   (cond
	    (cond!3 cx!3!2)
	    (cond!2 cx!2!2)
	    (cond!1 cx!1!2)
	    (else cx!0!2))))
      (let ((new_k!13 (ite (= cy!0!4 cy!0!5) 2 0))
	    (new_k!21 (ite (= cy!1!4 cy!1!5) 2 0))
	    (new_k!29 (ite (= cy!2!4 cy!2!5) 2 0))
	    (new_k!37 (ite (= cy!3!4 cy!3!5) 2 0)))
	(let ((cs!473 (= new_k!13 0))
	      (cs!476 (= new_k!21 0))
	      (cs!479 (= new_k!29 0))
	      (cs!482 (= new_k!37 0)))
	  (let ((new_k!14
		 (cond
		  (cs!473 1)
		  ((= cy!0!3 cy!0!5) (+ new_k!13 1))
		  (else (- new_k!13 1))))
		(new_x!7 (ite cs!473 cy!0!3 cy!0!5))
		(new_k!22
		 (cond
		  (cs!476 1)
		  ((= cy!1!3 cy!1!5) (+ new_k!21 1))
		  (else (- new_k!21 1))))
		(new_x!9 (ite cs!476 cy!1!3 cy!1!5))
		(new_k!30
		 (cond
		  (cs!479 1)
		  ((= cy!2!3 cy!2!5) (+ new_k!29 1))
		  (else (- new_k!29 1))))
		(new_x!11 (ite cs!479 cy!2!3 cy!2!5))
		(new_k!38
		 (cond
		  (cs!482 1)
		  ((= cy!3!3 cy!3!5) (+ new_k!37 1))
		  (else (- new_k!37 1))))
		(new_x!13 (ite cs!482 cy!3!3 cy!3!5)))
	    (let ((cs!474 (= new_k!14 0))
		  (cs!477 (= new_k!22 0))
		  (cs!480 (= new_k!30 0))
		  (cs!483 (= new_k!38 0)))
	      (let ((new_k!15
		     (cond
		      (cs!474 1)
		      ((= cy!0!2 new_x!7) (+ new_k!14 1))
		      (else (- new_k!14 1))))
		    (new_x!8 (ite cs!474 cy!0!2 new_x!7))
		    (new_k!23
		     (cond
		      (cs!477 1)
		      ((= cy!1!2 new_x!9) (+ new_k!22 1))
		      (else (- new_k!22 1))))
		    (new_x!10 (ite cs!477 cy!1!2 new_x!9))
		    (new_k!31
		     (cond
		      (cs!480 1)
		      ((= cy!2!2 new_x!11) (+ new_k!30 1))
		      (else (- new_k!30 1))))
		    (new_x!12 (ite cs!480 cy!2!2 new_x!11))
		    (new_k!39
		     (cond
		      (cs!483 1)
		      ((= cy!3!2 new_x!13) (+ new_k!38 1))
		      (else (- new_k!38 1))))
		    (new_x!14 (ite cs!483 cy!3!2 new_x!13)))
		(let ((cs!475 (= new_k!15 0))
		      (cs!478 (= new_k!23 0))
		      (cs!481 (= new_k!31 0))
		      (cs!484 (= new_k!39 0)))
		  (let ((x!16
			 (cond
			  ((=
			    (cond
			     (cs!475 1)
			     ((= cy!0!1 new_x!8) (+ new_k!15 1))
			     (else (- new_k!15 1)))
			    0)
			   cy!0!0)
			  (cs!475 cy!0!1)
			  (else new_x!8)))
			(x!17
			 (cond
			  ((=
			    (cond
			     (cs!478 1)
			     ((= cy!1!1 new_x!10) (+ new_k!23 1))
			     (else (- new_k!23 1)))
			    0)
			   cy!1!0)
			  (cs!478 cy!1!1)
			  (else new_x!10)))
			(x!18
			 (cond
			  ((=
			    (cond
			     (cs!481 1)
			     ((= cy!2!1 new_x!12) (+ new_k!31 1))
			     (else (- new_k!31 1)))
			    0)
			   cy!2!0)
			  (cs!481 cy!2!1)
			  (else new_x!12)))
			(x!19
			 (cond
			  ((=
			    (cond
			     (cs!484 1)
			     ((= cy!3!1 new_x!14) (+ new_k!39 1))
			     (else (- new_k!39 1)))
			    0)
			   cy!3!0)
			  (cs!484 cy!3!1)
			  (else new_x!14))))
		    (let ((new_k!16 (ite (= cy!0!5 x!16) 3 4))
			  (new_k!24 (ite (= cy!1!5 x!17) 3 4))
			  (new_k!32 (ite (= cy!2!5 x!18) 3 4))
			  (new_k!40 (ite (= cy!3!5 x!19) 3 4)))
		      (let ((new_k!17
			     (ite (= cy!0!4 x!16) (- new_k!16 1) new_k!16))
			    (new_k!25 (ite (= cy!1!4 x!17) (- new_k!24 1) new_k!24))
			    (new_k!33 (ite (= cy!2!4 x!18) (- new_k!32 1) new_k!32))
			    (new_k!41
			     (ite (= cy!3!4 x!19) (- new_k!40 1) new_k!40)))
			(let ((new_k!18
			       (ite (= cy!0!3 x!16) (- new_k!17 1) new_k!17))
			      (new_k!26 (ite (= cy!1!3 x!17) (- new_k!25 1) new_k!25))
			      (new_k!34 (ite (= cy!2!3 x!18) (- new_k!33 1) new_k!33))
			      (new_k!42
			       (ite (= cy!3!3 x!19) (- new_k!41 1) new_k!41)))
			  (let ((new_k!19
				 (ite (= cy!0!2 x!16) (- new_k!18 1) new_k!18))
				(new_k!27 (ite (= cy!1!2 x!17) (- new_k!26 1) new_k!26))
				(new_k!35 (ite (= cy!2!2 x!18) (- new_k!34 1) new_k!34))
				(new_k!43
				 (ite (= cy!3!2 x!19) (- new_k!42 1) new_k!42)))
			    (let ((new_k!20
				   (ite (= cy!0!1 x!16) (- new_k!19 1) new_k!19))
				  (new_k!28 (ite (= cy!1!1 x!17) (- new_k!27 1) new_k!27))
				  (new_k!36 (ite (= cy!2!1 x!18) (- new_k!35 1) new_k!35))
				  (new_k!44
				   (ite (= cy!3!1 x!19) (- new_k!43 1) new_k!43)))
			      (and
			       (= source' source)
			       (= val' val)
			       (or
				(and
				 (= round 0)
				 (and
				  (or
				   cs!410
				   (/= 1 source)
				   (and
				    (= cx!0!0' val)
				    (= cx!0!1' val)
				    (= cx!0!2' val)
				    (= cx!0!3' val)
				    (= cx!0!4' val)
				    (= cx!0!5' val)))
				  (or
				   cs!417
				   (/= 2 source)
				   (and
				    (= cx!1!0' val)
				    (= cx!1!1' val)
				    (= cx!1!2' val)
				    (= cx!1!3' val)
				    (= cx!1!4' val)
				    (= cx!1!5' val)))
				  (or
				   cs!424
				   (/= 3 source)
				   (and
				    (= cx!2!0' val)
				    (= cx!2!1' val)
				    (= cx!2!2' val)
				    (= cx!2!3' val)
				    (= cx!2!4' val)
				    (= cx!2!5' val)))
				  (or
				   cs!431
				   (/= 4 source)
				   (and
				    (= cx!3!0' val)
				    (= cx!3!1' val)
				    (= cx!3!2' val)
				    (= cx!3!3' val)
				    (= cx!3!4' val)
				    (= cx!3!5' val)))
				  (or
				   cs!410
				   (= 1 source)
				   (and
				    (= cx!0!0' 0)
				    (= cx!0!1' 0)
				    (= cx!0!2' 0)
				    (= cx!0!3' 0)
				    (= cx!0!4' 0)
				    (= cx!0!5' 0)))
				  (or
				   cs!417
				   (= 2 source)
				   (and
				    (= cx!1!0' 0)
				    (= cx!1!1' 0)
				    (= cx!1!2' 0)
				    (= cx!1!3' 0)
				    (= cx!1!4' 0)
				    (= cx!1!5' 0)))
				  (or
				   cs!424
				   (= 3 source)
				   (and
				    (= cx!2!0' 0)
				    (= cx!2!1' 0)
				    (= cx!2!2' 0)
				    (= cx!2!3' 0)
				    (= cx!2!4' 0)
				    (= cx!2!5' 0)))
				  (or
				   cs!431
				   (= 4 source)
				   (and
				    (= cx!3!0' 0)
				    (= cx!3!1' 0)
				    (= cx!3!2' 0)
				    (= cx!3!3' 0)
				    (= cx!3!4' 0)
				    (= cx!3!5' 0))))
				 (= round' 1)
				 cs!439
				 cs!440
				 cs!441
				 cs!442)
				(and
				 (= round 1)
				 (and
				  (or cs!467 (= cy!0!0' cs!468))
				  (or cs!467 (= cy!1!0' cs!468))
				  (or cs!467 (= cy!2!0' cs!468))
				  (or cs!467 (= cy!3!0' cs!468))
				  (or cs!469 (= cy!0!1' cs!470))
				  (or cs!469 (= cy!1!1' cs!470))
				  (or cs!469 (= cy!2!1' cs!470))
				  (or cs!469 (= cy!3!1' cs!470))
				  (or cs!471 (= cy!0!2' cs!472))
				  (or cs!471 (= cy!1!2' cs!472))
				  (or cs!471 (= cy!2!2' cs!472))
				  (or cs!471 (= cy!3!2' cs!472))
				  (or cs!380 (= cy!0!3' cs!381))
				  (or cs!380 (= cy!1!3' cs!381))
				  (or cs!380 (= cy!2!3' cs!381))
				  (or cs!380 (= cy!3!3' cs!381))
				  (or cs!382 (= cy!0!4' cs!383))
				  (or cs!382 (= cy!1!4' cs!383))
				  (or cs!382 (= cy!2!4' cs!383))
				  (or cs!382 (= cy!3!4' cs!383))
				  (or cs!402 (= cy!0!5' cs!409))
				  (or cs!402 (= cy!1!5' cs!409))
				  (or cs!402 (= cy!2!5' cs!409))
				  (or cs!402 (= cy!3!5' cs!409)))
				 (= round' 2)
				 cs!438
				 cs!440
				 cs!441
				 cs!442)
				(and
				 (= round 2)
				 (and
				  (or
				   cs!410
				   (=
				    v!0'
				    (ite (or
					  (= new_k!16 0)
					  (= new_k!17 0)
					  (= new_k!18 0)
					  (= new_k!19 0)
					  (= new_k!20 0)
					  (= (ite (= cy!0!0 x!16) (- new_k!20 1) new_k!20) 0))
					 x!16
					 0)))
				  (or
				   cs!417
				   (=
				    v!1'
				    (ite (or
					  (= new_k!24 0)
					  (= new_k!25 0)
					  (= new_k!26 0)
					  (= new_k!27 0)
					  (= new_k!28 0)
					  (= (ite (= cy!1!0 x!17) (- new_k!28 1) new_k!28) 0))
					 x!17
					 0)))
				  (or
				   cs!424
				   (=
				    v!2'
				    (ite (or
					  (= new_k!32 0)
					  (= new_k!33 0)
					  (= new_k!34 0)
					  (= new_k!35 0)
					  (= new_k!36 0)
					  (= (ite (= cy!2!0 x!18) (- new_k!36 1) new_k!36) 0))
					 x!18
					 0)))
				  (or
				   cs!431
				   (=
				    v!3'
				    (ite (or
					  (= new_k!40 0)
					  (= new_k!41 0)
					  (= new_k!42 0)
					  (= new_k!43 0)
					  (= new_k!44 0)
					  (= (ite (= cy!3!0 x!19) (- new_k!44 1) new_k!44) 0))
					 x!19
					 0))))
				 (= round' 3)
				 cs!438
				 cs!439
				 cs!440
				 cs!441)
				(and
				 (= round 3)
				 cs!438
				 cs!439
				 cs!440
				 cs!441
				 (= round' round)
				 cs!442))))))))))))))))))

;;
;; Transition system
;;
(define-transition-system OM
  state
  init
  trans
)


;;
;; Query: agreement
;;
(query OM
      (or
        (not
          (cond
            ((= source 4) good_p!3)
            ((= source 3) good_p!2)
            ((= source 2) good_p!1)
            (else good_p!0)))
        (< round 3)
        (and
          (or (not good_p!0) (= v!0 val))
          (or (not good_p!1) (= v!1 val))
          (or (not good_p!2) (= v!2 val))
          (or (not good_p!3) (= v!3 val)))))
 