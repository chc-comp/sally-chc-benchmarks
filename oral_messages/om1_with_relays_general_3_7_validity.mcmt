;; State type:
;;  cx!i!j: channel from process i to relay j
;;  cy!i!j: channel from relay j to process i
;;  good_p!i: true if process i is non-faulty
;;  good_r!j: true if relay k is non-faulty
;;  v!i: result produced by process i
;;  round: global round counter
;;
;; Encoding:
;;  channels store a real value. We encode "nothing sent" as 0.
;;
;; Parameters:
;;  source: id of the source process (integer between 1 and 4)
;;  val: value sent by the source, if its not faulty.
;;  val is assumed non-zero.
;;

(define-state-type state
  ((cx!0!0 Real)
   (cx!0!1 Real)
   (cx!0!2 Real)
   (cx!0!3 Real)
   (cx!0!4 Real)
   (cx!0!5 Real)
   (cx!0!6 Real)
   (cx!1!0 Real)
   (cx!1!1 Real)
   (cx!1!2 Real)
   (cx!1!3 Real)
   (cx!1!4 Real)
   (cx!1!5 Real)
   (cx!1!6 Real)
   (cx!2!0 Real)
   (cx!2!1 Real)
   (cx!2!2 Real)
   (cx!2!3 Real)
   (cx!2!4 Real)
   (cx!2!5 Real)
   (cx!2!6 Real)
   (cy!0!0 Real)
   (cy!0!1 Real)
   (cy!0!2 Real)
   (cy!0!3 Real)
   (cy!0!4 Real)
   (cy!0!5 Real)
   (cy!0!6 Real)
   (cy!1!0 Real)
   (cy!1!1 Real)
   (cy!1!2 Real)
   (cy!1!3 Real)
   (cy!1!4 Real)
   (cy!1!5 Real)
   (cy!1!6 Real)
   (cy!2!0 Real)
   (cy!2!1 Real)
   (cy!2!2 Real)
   (cy!2!3 Real)
   (cy!2!4 Real)
   (cy!2!5 Real)
   (cy!2!6 Real)
   (good_p!0 Bool)
   (good_p!1 Bool)
   (good_p!2 Bool)
   (good_r!0 Bool)
   (good_r!1 Bool)
   (good_r!2 Bool)
   (good_r!3 Bool)
   (good_r!4 Bool)
   (good_r!5 Bool)
   (good_r!6 Bool)
   (v!0 Real)
   (v!1 Real)
   (v!2 Real)
   (round Real)
   ;; parameters
   (source Real)
   (val Real)))

      

;;
;; Initial state
;;
(define-states init state
  (and
   (= round 0)
   (= cx!0!0 0)
   (= cx!0!1 0)
   (= cx!0!2 0)
   (= cx!0!3 0)
   (= cx!0!4 0)
   (= cx!0!5 0)
   (= cx!0!6 0)
   (= cx!1!0 0)
   (= cx!1!1 0)
   (= cx!1!2 0)
   (= cx!1!3 0)
   (= cx!1!4 0)
   (= cx!1!5 0)
   (= cx!1!6 0)
   (= cx!2!0 0)
   (= cx!2!1 0)
   (= cx!2!2 0)
   (= cx!2!3 0)
   (= cx!2!4 0)
   (= cx!2!5 0)
   (= cx!2!6 0)
   (= cy!0!0 0)
   (= cy!0!1 0)
   (= cy!0!2 0)
   (= cy!0!3 0)
   (= cy!0!4 0)
   (= cy!0!5 0)
   (= cy!0!6 0)
   (= cy!1!0 0)
   (= cy!1!1 0)
   (= cy!1!2 0)
   (= cy!1!3 0)
   (= cy!1!4 0)
   (= cy!1!5 0)
   (= cy!1!6 0)
   (= cy!2!0 0)
   (= cy!2!1 0)
   (= cy!2!2 0)
   (= cy!2!3 0)
   (= cy!2!4 0)
   (= cy!2!5 0)
   (= cy!2!6 0)
   ;;
   ;; Constraints on val and source
   ;;
   (or (= source 1) (= source 2) (= source 3))
   (not (= val 0))
   ;;
   ;; Fault model
   ;;
   (and good_p!0 good_p!1 good_p!2)
   (or
    (and
     (not good_r!0)
     good_r!1
     good_r!2
     good_r!3
     good_r!4
     good_r!5
     good_r!6)
    (and
     (not good_r!1)
     good_r!0
     good_r!2
     good_r!3
     good_r!4
     good_r!5
     good_r!6)
    (and
     (not good_r!2)
     good_r!0
     good_r!1
     good_r!3
     good_r!4
     good_r!5
     good_r!6)
    (and
     (not good_r!3)
     good_r!0
     good_r!1
     good_r!2
     good_r!4
     good_r!5
     good_r!6)
    (and
     (not good_r!4)
     good_r!0
     good_r!1
     good_r!2
     good_r!3
     good_r!5
     good_r!6)
    (and
     (not good_r!5)
     good_r!0
     good_r!1
     good_r!2
     good_r!3
     good_r!4
     good_r!6)
    (and
     (not good_r!6)
     good_r!0
     good_r!1
     good_r!2
     good_r!3
     good_r!4
     good_r!5))))

;;
;; Transition relation
;; 
(define-transition trans state
  (let ((cond!1 (= source 2))
	(cond!2 (= source 3))
	(cs!359 (not good_r!5))
	(cs!375 (not good_r!6))
	(cs!384 (not good_p!0))
	(cs!392 (not good_p!1))
	(cs!400 (not good_p!2))
	(cs!408
	 (and
	  (= cx!0!0' cx!0!0)
	  (= cx!0!1' cx!0!1)
	  (= cx!0!2' cx!0!2)
	  (= cx!0!3' cx!0!3)
	  (= cx!0!4' cx!0!4)
	  (= cx!0!5' cx!0!5)
	  (= cx!0!6' cx!0!6)
	  (= cx!1!0' cx!1!0)
	  (= cx!1!1' cx!1!1)
	  (= cx!1!2' cx!1!2)
	  (= cx!1!3' cx!1!3)
	  (= cx!1!4' cx!1!4)
	  (= cx!1!5' cx!1!5)
	  (= cx!1!6' cx!1!6)
	  (= cx!2!0' cx!2!0)
	  (= cx!2!1' cx!2!1)
	  (= cx!2!2' cx!2!2)
	  (= cx!2!3' cx!2!3)
	  (= cx!2!4' cx!2!4)
	  (= cx!2!5' cx!2!5)
	  (= cx!2!6' cx!2!6)))
	(cs!409
	 (and
	  (= cy!0!0' cy!0!0)
	  (= cy!0!1' cy!0!1)
	  (= cy!0!2' cy!0!2)
	  (= cy!0!3' cy!0!3)
	  (= cy!0!4' cy!0!4)
	  (= cy!0!5' cy!0!5)
	  (= cy!0!6' cy!0!6)
	  (= cy!1!0' cy!1!0)
	  (= cy!1!1' cy!1!1)
	  (= cy!1!2' cy!1!2)
	  (= cy!1!3' cy!1!3)
	  (= cy!1!4' cy!1!4)
	  (= cy!1!5' cy!1!5)
	  (= cy!1!6' cy!1!6)
	  (= cy!2!0' cy!2!0)
	  (= cy!2!1' cy!2!1)
	  (= cy!2!2' cy!2!2)
	  (= cy!2!3' cy!2!3)
	  (= cy!2!4' cy!2!4)
	  (= cy!2!5' cy!2!5)
	  (= cy!2!6' cy!2!6)))
	(cs!410
	 (and
	  (= good_p!0' good_p!0)
	  (= good_p!1' good_p!1)
	  (= good_p!2' good_p!2)))
	(cs!411
	 (and
	  (= good_r!0' good_r!0)
	  (= good_r!1' good_r!1)
	  (= good_r!2' good_r!2)
	  (= good_r!3' good_r!3)
	  (= good_r!4' good_r!4)
	  (= good_r!5' good_r!5)
	  (= good_r!6' good_r!6)))
	(cs!412 (and (= v!0' v!0) (= v!1' v!1) (= v!2' v!2)))
	(cs!434 (not good_r!0))
	(cs!436 (not good_r!1))
	(cs!438 (not good_r!2))
	(cs!440 (not good_r!3))
	(cs!442 (not good_r!4)))
    (let ((cs!360
	   (cond (cond!2 cx!2!5) (cond!1 cx!1!5) (else cx!0!5)))
	  (cs!383
	   (cond (cond!2 cx!2!6) (cond!1 cx!1!6) (else cx!0!6)))
	  (cs!435
	   (cond (cond!2 cx!2!0) (cond!1 cx!1!0) (else cx!0!0)))
	  (cs!437
	   (cond (cond!2 cx!2!1) (cond!1 cx!1!1) (else cx!0!1)))
	  (cs!439
	   (cond (cond!2 cx!2!2) (cond!1 cx!1!2) (else cx!0!2)))
	  (cs!441
	   (cond (cond!2 cx!2!3) (cond!1 cx!1!3) (else cx!0!3)))
	  (cs!443
	   (cond (cond!2 cx!2!4) (cond!1 cx!1!4) (else cx!0!4))))
      (let ((new_k!15 (ite (= cy!0!5 cy!0!6) 2 0))
	    (new_k!25 (ite (= cy!1!5 cy!1!6) 2 0))
	    (new_k!35 (ite (= cy!2!5 cy!2!6) 2 0)))
	(let ((cs!444 (= new_k!15 0))
	      (cs!448 (= new_k!25 0))
	      (cs!452 (= new_k!35 0)))
	  (let ((new_k!16
		 (cond
		  (cs!444 1)
		  ((= cy!0!4 cy!0!6) (+ new_k!15 1))
		  (else (- new_k!15 1))))
		(new_x!8 (ite cs!444 cy!0!4 cy!0!6))
		(new_k!26
		 (cond
		  (cs!448 1)
		  ((= cy!1!4 cy!1!6) (+ new_k!25 1))
		  (else (- new_k!25 1))))
		(new_x!11 (ite cs!448 cy!1!4 cy!1!6))
		(new_k!36
		 (cond
		  (cs!452 1)
		  ((= cy!2!4 cy!2!6) (+ new_k!35 1))
		  (else (- new_k!35 1))))
		(new_x!14 (ite cs!452 cy!2!4 cy!2!6)))
	    (let ((cs!445 (= new_k!16 0))
		  (cs!449 (= new_k!26 0))
		  (cs!453 (= new_k!36 0)))
	      (let ((new_k!17
		     (cond
		      (cs!445 1)
		      ((= cy!0!3 new_x!8) (+ new_k!16 1))
		      (else (- new_k!16 1))))
		    (new_x!9 (ite cs!445 cy!0!3 new_x!8))
		    (new_k!27
		     (cond
		      (cs!449 1)
		      ((= cy!1!3 new_x!11) (+ new_k!26 1))
		      (else (- new_k!26 1))))
		    (new_x!12 (ite cs!449 cy!1!3 new_x!11))
		    (new_k!37
		     (cond
		      (cs!453 1)
		      ((= cy!2!3 new_x!14) (+ new_k!36 1))
		      (else (- new_k!36 1))))
		    (new_x!15 (ite cs!453 cy!2!3 new_x!14)))
		(let ((cs!446 (= new_k!17 0))
		      (cs!450 (= new_k!27 0))
		      (cs!454 (= new_k!37 0)))
		  (let ((new_k!18
			 (cond
			  (cs!446 1)
			  ((= cy!0!2 new_x!9) (+ new_k!17 1))
			  (else (- new_k!17 1))))
			(new_x!10 (ite cs!446 cy!0!2 new_x!9))
			(new_k!28
			 (cond
			  (cs!450 1)
			  ((= cy!1!2 new_x!12) (+ new_k!27 1))
			  (else (- new_k!27 1))))
			(new_x!13 (ite cs!450 cy!1!2 new_x!12))
			(new_k!38
			 (cond
			  (cs!454 1)
			  ((= cy!2!2 new_x!15) (+ new_k!37 1))
			  (else (- new_k!37 1))))
			(new_x!16 (ite cs!454 cy!2!2 new_x!15)))
		    (let ((cs!447 (= new_k!18 0))
			  (cs!451 (= new_k!28 0))
			  (cs!455 (= new_k!38 0)))
		      (let ((x!18
			     (cond
			      ((=
				(cond
				 (cs!447 1)
				 ((= cy!0!1 new_x!10) (+ new_k!18 1))
				 (else (- new_k!18 1)))
				0)
			       cy!0!0)
			      (cs!447 cy!0!1)
			      (else new_x!10)))
			    (x!19
			     (cond
			      ((=
				(cond
				 (cs!451 1)
				 ((= cy!1!1 new_x!13) (+ new_k!28 1))
				 (else (- new_k!28 1)))
				0)
			       cy!1!0)
			      (cs!451 cy!1!1)
			      (else new_x!13)))
			    (x!20
			     (cond
			      ((=
				(cond
				 (cs!455 1)
				 ((= cy!2!1 new_x!16) (+ new_k!38 1))
				 (else (- new_k!38 1)))
				0)
			       cy!2!0)
			      (cs!455 cy!2!1)
			      (else new_x!16))))
			(let ((new_k!19 (ite (= cy!0!6 x!18) 3 4))
			      (new_k!29 (ite (= cy!1!6 x!19) 3 4))
			      (new_k!39 (ite (= cy!2!6 x!20) 3 4)))
			  (let ((new_k!20
				 (ite (= cy!0!5 x!18) (- new_k!19 1) new_k!19))
				(new_k!30 (ite (= cy!1!5 x!19) (- new_k!29 1) new_k!29))
				(new_k!40
				 (ite (= cy!2!5 x!20) (- new_k!39 1) new_k!39)))
			    (let ((new_k!21
				   (ite (= cy!0!4 x!18) (- new_k!20 1) new_k!20))
				  (new_k!31 (ite (= cy!1!4 x!19) (- new_k!30 1) new_k!30))
				  (new_k!41
				   (ite (= cy!2!4 x!20) (- new_k!40 1) new_k!40)))
			      (let ((new_k!22
				     (ite (= cy!0!3 x!18) (- new_k!21 1) new_k!21))
				    (new_k!32 (ite (= cy!1!3 x!19) (- new_k!31 1) new_k!31))
				    (new_k!42
				     (ite (= cy!2!3 x!20) (- new_k!41 1) new_k!41)))
				(let ((new_k!23
				       (ite (= cy!0!2 x!18) (- new_k!22 1) new_k!22))
				      (new_k!33 (ite (= cy!1!2 x!19) (- new_k!32 1) new_k!32))
				      (new_k!43
				       (ite (= cy!2!2 x!20) (- new_k!42 1) new_k!42)))
				  (let ((new_k!24
					 (ite (= cy!0!1 x!18) (- new_k!23 1) new_k!23))
					(new_k!34 (ite (= cy!1!1 x!19) (- new_k!33 1) new_k!33))
					(new_k!44
					 (ite (= cy!2!1 x!20) (- new_k!43 1) new_k!43)))
				    (and
				     (= source' source)
				     (= val' val)
				     (or
				      (and
				       (= round 0)
				       (and
					(or
					 cs!384
					 (/= 1 source)
					 (and
					  (= cx!0!0' val)
					  (= cx!0!1' val)
					  (= cx!0!2' val)
					  (= cx!0!3' val)
					  (= cx!0!4' val)
					  (= cx!0!5' val)
					  (= cx!0!6' val)))
					(or
					 cs!392
					 (/= 2 source)
					 (and
					  (= cx!1!0' val)
					  (= cx!1!1' val)
					  (= cx!1!2' val)
					  (= cx!1!3' val)
					  (= cx!1!4' val)
					  (= cx!1!5' val)
					  (= cx!1!6' val)))
					(or
					 cs!400
					 (/= 3 source)
					 (and
					  (= cx!2!0' val)
					  (= cx!2!1' val)
					  (= cx!2!2' val)
					  (= cx!2!3' val)
					  (= cx!2!4' val)
					  (= cx!2!5' val)
					  (= cx!2!6' val)))
					(or
					 cs!384
					 (= 1 source)
					 (and
					  (= cx!0!0' 0)
					  (= cx!0!1' 0)
					  (= cx!0!2' 0)
					  (= cx!0!3' 0)
					  (= cx!0!4' 0)
					  (= cx!0!5' 0)
					  (= cx!0!6' 0)))
					(or
					 cs!392
					 (= 2 source)
					 (and
					  (= cx!1!0' 0)
					  (= cx!1!1' 0)
					  (= cx!1!2' 0)
					  (= cx!1!3' 0)
					  (= cx!1!4' 0)
					  (= cx!1!5' 0)
					  (= cx!1!6' 0)))
					(or
					 cs!400
					 (= 3 source)
					 (and
					  (= cx!2!0' 0)
					  (= cx!2!1' 0)
					  (= cx!2!2' 0)
					  (= cx!2!3' 0)
					  (= cx!2!4' 0)
					  (= cx!2!5' 0)
					  (= cx!2!6' 0))))
				       (= round' 1)
				       cs!409
				       cs!410
				       cs!411
				       cs!412)
				      (and
				       (= round 1)
				       (and
					(or cs!434 (= cy!0!0' cs!435))
					(or cs!434 (= cy!1!0' cs!435))
					(or cs!434 (= cy!2!0' cs!435))
					(or cs!436 (= cy!0!1' cs!437))
					(or cs!436 (= cy!1!1' cs!437))
					(or cs!436 (= cy!2!1' cs!437))
					(or cs!438 (= cy!0!2' cs!439))
					(or cs!438 (= cy!1!2' cs!439))
					(or cs!438 (= cy!2!2' cs!439))
					(or cs!440 (= cy!0!3' cs!441))
					(or cs!440 (= cy!1!3' cs!441))
					(or cs!440 (= cy!2!3' cs!441))
					(or cs!442 (= cy!0!4' cs!443))
					(or cs!442 (= cy!1!4' cs!443))
					(or cs!442 (= cy!2!4' cs!443))
					(or cs!359 (= cy!0!5' cs!360))
					(or cs!359 (= cy!1!5' cs!360))
					(or cs!359 (= cy!2!5' cs!360))
					(or cs!375 (= cy!0!6' cs!383))
					(or cs!375 (= cy!1!6' cs!383))
					(or cs!375 (= cy!2!6' cs!383)))
				       (= round' 2)
				       cs!408
				       cs!410
				       cs!411
				       cs!412)
				      (and
				       (= round 2)
				       (and
					(or
					 cs!384
					 (=
					  v!0'
					  (ite (or
						(= new_k!19 0)
						(= new_k!20 0)
						(= new_k!21 0)
						(= new_k!22 0)
						(= new_k!23 0)
						(= new_k!24 0)
						(= (ite (= cy!0!0 x!18) (- new_k!24 1) new_k!24) 0))
					       x!18
					       0)))
					(or
					 cs!392
					 (=
					  v!1'
					  (ite (or
						(= new_k!29 0)
						(= new_k!30 0)
						(= new_k!31 0)
						(= new_k!32 0)
						(= new_k!33 0)
						(= new_k!34 0)
						(= (ite (= cy!1!0 x!19) (- new_k!34 1) new_k!34) 0))
					       x!19
					       0)))
					(or
					 cs!400
					 (=
					  v!2'
					  (ite (or
						(= new_k!39 0)
						(= new_k!40 0)
						(= new_k!41 0)
						(= new_k!42 0)
						(= new_k!43 0)
						(= new_k!44 0)
						(= (ite (= cy!2!0 x!20) (- new_k!44 1) new_k!44) 0))
					       x!20
					       0))))
				       (= round' 3)
				       cs!408
				       cs!409
				       cs!410
				       cs!411)
				      (and
				       (= round 3)
				       cs!408
				       cs!409
				       cs!410
				       cs!411
				       (= round' round)
				       cs!412)))))))))))))))))))))


;;
;; Transition system
;;
(define-transition-system OM
  state
  init
  trans
)

;;
;; Query: validity
;;
(query OM
       (or
        (not
	 (cond
	  ((= source 3) good_p!2)
	  ((= source 2) good_p!1)
	  (else good_p!0)))
        (< round 3)
        (and
	 (or (not good_p!0) (= v!0 val))
	 (or (not good_p!1) (= v!1 val))
	 (or (not good_p!2) (= v!2 val)))))

