;; State type:
;;  cx!i!j: channel from process i to relay j
;;  cy!i!j: channel from relay j to process i
;;  good_p!i: true if process i is non-faulty
;;  good_r!j: true if relay k is non-faulty
;;  v!i: result produced by process i
;;  round: global round counter
;;
;; Encoding:
;;  channels store a real value. We encode "nothing sent" as 0.
;;
;; Parameters:
;;  source: id of the source process (integer between 1 and 4)
;;  val: value sent by the source, if its not faulty.
;;  val is assumed non-zero.
;;

(define-state-type state
  ((cx!0!0 Real)
   (cx!0!1 Real)
   (cx!0!2 Real)
   (cx!0!3 Real)
   (cx!0!4 Real)
   (cx!1!0 Real)
   (cx!1!1 Real)
   (cx!1!2 Real)
   (cx!1!3 Real)
   (cx!1!4 Real)
   (cx!2!0 Real)
   (cx!2!1 Real)
   (cx!2!2 Real)
   (cx!2!3 Real)
   (cx!2!4 Real)
   (cx!3!0 Real)
   (cx!3!1 Real)
   (cx!3!2 Real)
   (cx!3!3 Real)
   (cx!3!4 Real)
   (cx!4!0 Real)
   (cx!4!1 Real)
   (cx!4!2 Real)
   (cx!4!3 Real)
   (cx!4!4 Real)
   (cy!0!0 Real)
   (cy!0!1 Real)
   (cy!0!2 Real)
   (cy!0!3 Real)
   (cy!0!4 Real)
   (cy!1!0 Real)
   (cy!1!1 Real)
   (cy!1!2 Real)
   (cy!1!3 Real)
   (cy!1!4 Real)
   (cy!2!0 Real)
   (cy!2!1 Real)
   (cy!2!2 Real)
   (cy!2!3 Real)
   (cy!2!4 Real)
   (cy!3!0 Real)
   (cy!3!1 Real)
   (cy!3!2 Real)
   (cy!3!3 Real)
   (cy!3!4 Real)
   (cy!4!0 Real)
   (cy!4!1 Real)
   (cy!4!2 Real)
   (cy!4!3 Real)
   (cy!4!4 Real)
   (good_p!0 Bool)
   (good_p!1 Bool)
   (good_p!2 Bool)
   (good_p!3 Bool)
   (good_p!4 Bool)
   (good_r!0 Bool)
   (good_r!1 Bool)
   (good_r!2 Bool)
   (good_r!3 Bool)
   (good_r!4 Bool)
   (v!0 Real)
   (v!1 Real)
   (v!2 Real)
   (v!3 Real)
   (v!4 Real)
   (round Real)
   ;; parameters
   (source Real)
   (val Real)))



;;
;; Initial states
;;
(define-states init state
  (and
   (= round 0)
   (= cx!0!0 0)
   (= cx!0!1 0)
   (= cx!0!2 0)
   (= cx!0!3 0)
   (= cx!0!4 0)
   (= cx!1!0 0)
   (= cx!1!1 0)
   (= cx!1!2 0)
   (= cx!1!3 0)
   (= cx!1!4 0)
   (= cx!2!0 0)
   (= cx!2!1 0)
   (= cx!2!2 0)
   (= cx!2!3 0)
   (= cx!2!4 0)
   (= cx!3!0 0)
   (= cx!3!1 0)
   (= cx!3!2 0)
   (= cx!3!3 0)
   (= cx!3!4 0)
   (= cx!4!0 0)
   (= cx!4!1 0)
   (= cx!4!2 0)
   (= cx!4!3 0)
   (= cx!4!4 0)
   (= cy!0!0 0)
   (= cy!0!1 0)
   (= cy!0!2 0)
   (= cy!0!3 0)
   (= cy!0!4 0)
   (= cy!1!0 0)
   (= cy!1!1 0)
   (= cy!1!2 0)
   (= cy!1!3 0)
   (= cy!1!4 0)
   (= cy!2!0 0)
   (= cy!2!1 0)
   (= cy!2!2 0)
   (= cy!2!3 0)
   (= cy!2!4 0)
   (= cy!3!0 0)
   (= cy!3!1 0)
   (= cy!3!2 0)
   (= cy!3!3 0)
   (= cy!3!4 0)
   (= cy!4!0 0)
   (= cy!4!1 0)
   (= cy!4!2 0)
   (= cy!4!3 0)
   (= cy!4!4 0)
   ;;
   ;; Constraints on val and source
   ;;
   (or (= source 1) (= source 2) (= source 3) (= source 4) (= source 5))
   (not (= val 0))
   ;;
   ;; Fault model
   ;;
   (and good_p!0 good_p!1 good_p!2 good_p!3 good_p!4)
   (or
    (and (not good_r!0) good_r!1 good_r!2 good_r!3 good_r!4)
    (and (not good_r!1) good_r!0 good_r!2 good_r!3 good_r!4)
    (and (not good_r!2) good_r!0 good_r!1 good_r!3 good_r!4)
    (and (not good_r!3) good_r!0 good_r!1 good_r!2 good_r!4)
    (and (not good_r!4) good_r!0 good_r!1 good_r!2 good_r!3))))

;;
;; Transition relation
;; 
(define-transition trans state
  (let ((cond!1 (= source 2))
	(cond!2 (= source 3))
	(cond!3 (= source 4))
	(cond!4 (= source 5))
	(cs!375 (not good_r!2))
	(cs!377 (not good_r!3))
	(cs!399 (not good_r!4))
	(cs!406 (not good_p!0))
	(cs!412 (not good_p!1))
	(cs!418 (not good_p!2))
	(cs!424 (not good_p!3))
	(cs!430 (not good_p!4))
	(cs!436
	 (and
	  (= cx!0!0' cx!0!0)
	  (= cx!0!1' cx!0!1)
	  (= cx!0!2' cx!0!2)
	  (= cx!0!3' cx!0!3)
	  (= cx!0!4' cx!0!4)
	  (= cx!1!0' cx!1!0)
	  (= cx!1!1' cx!1!1)
	  (= cx!1!2' cx!1!2)
	  (= cx!1!3' cx!1!3)
	  (= cx!1!4' cx!1!4)
	  (= cx!2!0' cx!2!0)
	  (= cx!2!1' cx!2!1)
	  (= cx!2!2' cx!2!2)
	  (= cx!2!3' cx!2!3)
	  (= cx!2!4' cx!2!4)
	  (= cx!3!0' cx!3!0)
	  (= cx!3!1' cx!3!1)
	  (= cx!3!2' cx!3!2)
	  (= cx!3!3' cx!3!3)
	  (= cx!3!4' cx!3!4)
	  (= cx!4!0' cx!4!0)
	  (= cx!4!1' cx!4!1)
	  (= cx!4!2' cx!4!2)
	  (= cx!4!3' cx!4!3)
	  (= cx!4!4' cx!4!4)))
	(cs!437
	 (and
	  (= cy!0!0' cy!0!0)
	  (= cy!0!1' cy!0!1)
	  (= cy!0!2' cy!0!2)
	  (= cy!0!3' cy!0!3)
	  (= cy!0!4' cy!0!4)
	  (= cy!1!0' cy!1!0)
	  (= cy!1!1' cy!1!1)
	  (= cy!1!2' cy!1!2)
	  (= cy!1!3' cy!1!3)
	  (= cy!1!4' cy!1!4)
	  (= cy!2!0' cy!2!0)
	  (= cy!2!1' cy!2!1)
	  (= cy!2!2' cy!2!2)
	  (= cy!2!3' cy!2!3)
	  (= cy!2!4' cy!2!4)
	  (= cy!3!0' cy!3!0)
	  (= cy!3!1' cy!3!1)
	  (= cy!3!2' cy!3!2)
	  (= cy!3!3' cy!3!3)
	  (= cy!3!4' cy!3!4)
	  (= cy!4!0' cy!4!0)
	  (= cy!4!1' cy!4!1)
	  (= cy!4!2' cy!4!2)
	  (= cy!4!3' cy!4!3)
	  (= cy!4!4' cy!4!4)))
	(cs!438
	 (and
	  (= good_p!0' good_p!0)
	  (= good_p!1' good_p!1)
	  (= good_p!2' good_p!2)
	  (= good_p!3' good_p!3)
	  (= good_p!4' good_p!4)))
	(cs!439
	 (and
	  (= good_r!0' good_r!0)
	  (= good_r!1' good_r!1)
	  (= good_r!2' good_r!2)
	  (= good_r!3' good_r!3)
	  (= good_r!4' good_r!4)))
	(cs!440
	 (and
	  (= v!0' v!0)
	  (= v!1' v!1)
	  (= v!2' v!2)
	  (= v!3' v!3)
	  (= v!4' v!4)))
	(cs!466 (not good_r!0))
	(cs!468 (not good_r!1)))
    (let ((cs!376
	   (cond
	    (cond!4 cx!4!2)
	    (cond!3 cx!3!2)
	    (cond!2 cx!2!2)
	    (cond!1 cx!1!2)
	    (else cx!0!2)))
	  (cs!378
	   (cond
	    (cond!4 cx!4!3)
	    (cond!3 cx!3!3)
	    (cond!2 cx!2!3)
	    (cond!1 cx!1!3)
	    (else cx!0!3)))
	  (cs!405
	   (cond
	    (cond!4 cx!4!4)
	    (cond!3 cx!3!4)
	    (cond!2 cx!2!4)
	    (cond!1 cx!1!4)
	    (else cx!0!4)))
	  (cs!467
	   (cond
	    (cond!4 cx!4!0)
	    (cond!3 cx!3!0)
	    (cond!2 cx!2!0)
	    (cond!1 cx!1!0)
	    (else cx!0!0)))
	  (cs!469
	   (cond
	    (cond!4 cx!4!1)
	    (cond!3 cx!3!1)
	    (cond!2 cx!2!1)
	    (cond!1 cx!1!1)
	    (else cx!0!1))))
      (let ((new_k!11 (ite (= cy!0!3 cy!0!4) 2 0))
	    (new_k!17 (ite (= cy!1!3 cy!1!4) 2 0))
	    (new_k!23 (ite (= cy!2!3 cy!2!4) 2 0))
	    (new_k!29 (ite (= cy!3!3 cy!3!4) 2 0))
	    (new_k!35 (ite (= cy!4!3 cy!4!4) 2 0)))
	(let ((cs!470 (= new_k!11 0))
	      (cs!472 (= new_k!17 0))
	      (cs!474 (= new_k!23 0))
	      (cs!476 (= new_k!29 0))
	      (cs!478 (= new_k!35 0)))
	  (let ((new_k!12
		 (cond
		  (cs!470 1)
		  ((= cy!0!2 cy!0!4) (+ new_k!11 1))
		  (else (- new_k!11 1))))
		(new_x!6 (ite cs!470 cy!0!2 cy!0!4))
		(new_k!18
		 (cond
		  (cs!472 1)
		  ((= cy!1!2 cy!1!4) (+ new_k!17 1))
		  (else (- new_k!17 1))))
		(new_x!7 (ite cs!472 cy!1!2 cy!1!4))
		(new_k!24
		 (cond
		  (cs!474 1)
		  ((= cy!2!2 cy!2!4) (+ new_k!23 1))
		  (else (- new_k!23 1))))
		(new_x!8 (ite cs!474 cy!2!2 cy!2!4))
		(new_k!30
		 (cond
		  (cs!476 1)
		  ((= cy!3!2 cy!3!4) (+ new_k!29 1))
		  (else (- new_k!29 1))))
		(new_x!9 (ite cs!476 cy!3!2 cy!3!4))
		(new_k!36
		 (cond
		  (cs!478 1)
		  ((= cy!4!2 cy!4!4) (+ new_k!35 1))
		  (else (- new_k!35 1))))
		(new_x!10 (ite cs!478 cy!4!2 cy!4!4)))
	    (let ((cs!471 (= new_k!12 0))
		  (cs!473 (= new_k!18 0))
		  (cs!475 (= new_k!24 0))
		  (cs!477 (= new_k!30 0))
		  (cs!479 (= new_k!36 0)))
	      (let ((x!14
		     (cond
		      ((=
			(cond
			 (cs!471 1)
			 ((= cy!0!1 new_x!6) (+ new_k!12 1))
			 (else (- new_k!12 1)))
			0)
		       cy!0!0)
		      (cs!471 cy!0!1)
		      (else new_x!6)))
		    (x!15
		     (cond
		      ((=
			(cond
			 (cs!473 1)
			 ((= cy!1!1 new_x!7) (+ new_k!18 1))
			 (else (- new_k!18 1)))
			0)
		       cy!1!0)
		      (cs!473 cy!1!1)
		      (else new_x!7)))
		    (x!16
		     (cond
		      ((=
			(cond
			 (cs!475 1)
			 ((= cy!2!1 new_x!8) (+ new_k!24 1))
			 (else (- new_k!24 1)))
			0)
		       cy!2!0)
		      (cs!475 cy!2!1)
		      (else new_x!8)))
		    (x!17
		     (cond
		      ((=
			(cond
			 (cs!477 1)
			 ((= cy!3!1 new_x!9) (+ new_k!30 1))
			 (else (- new_k!30 1)))
			0)
		       cy!3!0)
		      (cs!477 cy!3!1)
		      (else new_x!9)))
		    (x!18
		     (cond
		      ((=
			(cond
			 (cs!479 1)
			 ((= cy!4!1 new_x!10) (+ new_k!36 1))
			 (else (- new_k!36 1)))
			0)
		       cy!4!0)
		      (cs!479 cy!4!1)
		      (else new_x!10))))
		(let ((new_k!13 (ite (= cy!0!4 x!14) 2 3))
		      (new_k!19 (ite (= cy!1!4 x!15) 2 3))
		      (new_k!25 (ite (= cy!2!4 x!16) 2 3))
		      (new_k!31 (ite (= cy!3!4 x!17) 2 3))
		      (new_k!37 (ite (= cy!4!4 x!18) 2 3)))
		  (let ((new_k!14
			 (ite (= cy!0!3 x!14) (- new_k!13 1) new_k!13))
			(new_k!20 (ite (= cy!1!3 x!15) (- new_k!19 1) new_k!19))
			(new_k!26 (ite (= cy!2!3 x!16) (- new_k!25 1) new_k!25))
			(new_k!32 (ite (= cy!3!3 x!17) (- new_k!31 1) new_k!31))
			(new_k!38
			 (ite (= cy!4!3 x!18) (- new_k!37 1) new_k!37)))
		    (let ((new_k!15
			   (ite (= cy!0!2 x!14) (- new_k!14 1) new_k!14))
			  (new_k!21 (ite (= cy!1!2 x!15) (- new_k!20 1) new_k!20))
			  (new_k!27 (ite (= cy!2!2 x!16) (- new_k!26 1) new_k!26))
			  (new_k!33 (ite (= cy!3!2 x!17) (- new_k!32 1) new_k!32))
			  (new_k!39
			   (ite (= cy!4!2 x!18) (- new_k!38 1) new_k!38)))
		      (let ((new_k!16
			     (ite (= cy!0!1 x!14) (- new_k!15 1) new_k!15))
			    (new_k!22 (ite (= cy!1!1 x!15) (- new_k!21 1) new_k!21))
			    (new_k!28 (ite (= cy!2!1 x!16) (- new_k!27 1) new_k!27))
			    (new_k!34 (ite (= cy!3!1 x!17) (- new_k!33 1) new_k!33))
			    (new_k!40
			     (ite (= cy!4!1 x!18) (- new_k!39 1) new_k!39)))
			(and
			 (= source' source)
			 (= val' val)
			 (or
			  (and
			   (= round 0)
			   (and
			    (or
			     cs!406
			     (/= 1 source)
			     (and
			      (= cx!0!0' val)
			      (= cx!0!1' val)
			      (= cx!0!2' val)
			      (= cx!0!3' val)
			      (= cx!0!4' val)))
			    (or
			     cs!412
			     (/= 2 source)
			     (and
			      (= cx!1!0' val)
			      (= cx!1!1' val)
			      (= cx!1!2' val)
			      (= cx!1!3' val)
			      (= cx!1!4' val)))
			    (or
			     cs!418
			     (/= 3 source)
			     (and
			      (= cx!2!0' val)
			      (= cx!2!1' val)
			      (= cx!2!2' val)
			      (= cx!2!3' val)
			      (= cx!2!4' val)))
			    (or
			     cs!424
			     (/= 4 source)
			     (and
			      (= cx!3!0' val)
			      (= cx!3!1' val)
			      (= cx!3!2' val)
			      (= cx!3!3' val)
			      (= cx!3!4' val)))
			    (or
			     cs!430
			     (/= 5 source)
			     (and
			      (= cx!4!0' val)
			      (= cx!4!1' val)
			      (= cx!4!2' val)
			      (= cx!4!3' val)
			      (= cx!4!4' val)))
			    (or
			     cs!406
			     (= 1 source)
			     (and
			      (= cx!0!0' 0)
			      (= cx!0!1' 0)
			      (= cx!0!2' 0)
			      (= cx!0!3' 0)
			      (= cx!0!4' 0)))
			    (or
			     cs!412
			     (= 2 source)
			     (and
			      (= cx!1!0' 0)
			      (= cx!1!1' 0)
			      (= cx!1!2' 0)
			      (= cx!1!3' 0)
			      (= cx!1!4' 0)))
			    (or
			     cs!418
			     (= 3 source)
			     (and
			      (= cx!2!0' 0)
			      (= cx!2!1' 0)
			      (= cx!2!2' 0)
			      (= cx!2!3' 0)
			      (= cx!2!4' 0)))
			    (or
			     cs!424
			     (= 4 source)
			     (and
			      (= cx!3!0' 0)
			      (= cx!3!1' 0)
			      (= cx!3!2' 0)
			      (= cx!3!3' 0)
			      (= cx!3!4' 0)))
			    (or
			     cs!430
			     (= 5 source)
			     (and
			      (= cx!4!0' 0)
			      (= cx!4!1' 0)
			      (= cx!4!2' 0)
			      (= cx!4!3' 0)
			      (= cx!4!4' 0))))
			   (= round' 1)
			   cs!437
			   cs!438
			   cs!439
			   cs!440)
			  (and
			   (= round 1)
			   (and
			    (or cs!466 (= cy!0!0' cs!467))
			    (or cs!466 (= cy!1!0' cs!467))
			    (or cs!466 (= cy!2!0' cs!467))
			    (or cs!466 (= cy!3!0' cs!467))
			    (or cs!466 (= cy!4!0' cs!467))
			    (or cs!468 (= cy!0!1' cs!469))
			    (or cs!468 (= cy!1!1' cs!469))
			    (or cs!468 (= cy!2!1' cs!469))
			    (or cs!468 (= cy!3!1' cs!469))
			    (or cs!468 (= cy!4!1' cs!469))
			    (or cs!375 (= cy!0!2' cs!376))
			    (or cs!375 (= cy!1!2' cs!376))
			    (or cs!375 (= cy!2!2' cs!376))
			    (or cs!375 (= cy!3!2' cs!376))
			    (or cs!375 (= cy!4!2' cs!376))
			    (or cs!377 (= cy!0!3' cs!378))
			    (or cs!377 (= cy!1!3' cs!378))
			    (or cs!377 (= cy!2!3' cs!378))
			    (or cs!377 (= cy!3!3' cs!378))
			    (or cs!377 (= cy!4!3' cs!378))
			    (or cs!399 (= cy!0!4' cs!405))
			    (or cs!399 (= cy!1!4' cs!405))
			    (or cs!399 (= cy!2!4' cs!405))
			    (or cs!399 (= cy!3!4' cs!405))
			    (or cs!399 (= cy!4!4' cs!405)))
			   (= round' 2)
			   cs!436
			   cs!438
			   cs!439
			   cs!440)
			  (and
			   (= round 2)
			   (and
			    (or
			     cs!406
			     (=
			      v!0'
			      (ite (or
				    (= new_k!13 0)
				    (= new_k!14 0)
				    (= new_k!15 0)
				    (= new_k!16 0)
				    (= (ite (= cy!0!0 x!14) (- new_k!16 1) new_k!16) 0))
				   x!14
				   0)))
			    (or
			     cs!412
			     (=
			      v!1'
			      (ite (or
				    (= new_k!19 0)
				    (= new_k!20 0)
				    (= new_k!21 0)
				    (= new_k!22 0)
				    (= (ite (= cy!1!0 x!15) (- new_k!22 1) new_k!22) 0))
				   x!15
				   0)))
			    (or
			     cs!418
			     (=
			      v!2'
			      (ite (or
				    (= new_k!25 0)
				    (= new_k!26 0)
				    (= new_k!27 0)
				    (= new_k!28 0)
				    (= (ite (= cy!2!0 x!16) (- new_k!28 1) new_k!28) 0))
				   x!16
				   0)))
			    (or
			     cs!424
			     (=
			      v!3'
			      (ite (or
				    (= new_k!31 0)
				    (= new_k!32 0)
				    (= new_k!33 0)
				    (= new_k!34 0)
				    (= (ite (= cy!3!0 x!17) (- new_k!34 1) new_k!34) 0))
				   x!17
				   0)))
			    (or
			     cs!430
			     (=
			      v!4'
			      (ite (or
				    (= new_k!37 0)
				    (= new_k!38 0)
				    (= new_k!39 0)
				    (= new_k!40 0)
				    (= (ite (= cy!4!0 x!18) (- new_k!40 1) new_k!40) 0))
				   x!18
				   0))))
			   (= round' 3)
			   cs!436
			   cs!437
			   cs!438
			   cs!439)
			  (and
			   (= round 3)
			   cs!436
			   cs!437
			   cs!438
			   cs!439
			   (= round' round)
			   cs!440)))))))))))))))

;;
;; Transition system
;;
(define-transition-system OM
  state
  init
  trans
)

;;
;; Query: validity
;;
(query OM
      (or
        (not
          (cond
            ((= source 5) good_p!4)
            ((= source 4) good_p!3)
            ((= source 3) good_p!2)
            ((= source 2) good_p!1)
            (else good_p!0)))
        (< round 3)
        (and
          (or (not good_p!0) (= v!0 val))
          (or (not good_p!1) (= v!1 val))
          (or (not good_p!2) (= v!2 val))
          (or (not good_p!3) (= v!3 val))
          (or (not good_p!4) (= v!4 val)))))

