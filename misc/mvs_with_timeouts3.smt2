(set-logic HORN)
(declare-fun invariant (Bool Bool Bool Bool Bool Bool Real Real Real Real Real Real Real Real Real Real Real Real Real Real Real Real) Bool)

;; Initial state
(assert
  (forall ((state.c1_b1 Bool) (state.c1_b2 Bool) (state.c1_b3 Bool) (state.c2_b1 Bool) (state.c2_b2 Bool) (state.c2_b3 Bool) (state.fcm_timeout1 Real) (state.fcm_timeout2 Real) (state.fcm_timeout3 Real) (state.mvs1 Real) (state.mvs2 Real) (state.mvs_timeout1 Real) (state.mvs_timeout2 Real) (state.pre_y1 Real) (state.pre_y3 Real) (state.time Real) (state.time_prev Real) (state.x Real) (state.x_prev Real) (state.y1 Real) (state.y2 Real) (state.y3 Real))
    (=> (let ((l0 (<= 0 |state.fcm_timeout1|))) (let ((l1 (/ 1 5))) (let ((l2 (< |state.fcm_timeout1| l1))) (let ((l3 (and l0 l2))) (let ((l4 (= |state.y1| 0))) (let ((l5 (= |state.pre_y1| 0))) (let ((l6 (<= 0 |state.fcm_timeout2|))) (let ((l7 (< |state.fcm_timeout2| l1))) (let ((l8 (and l6 l7))) (let ((l9 (<= 0 |state.fcm_timeout3|))) (let ((l10 (< |state.fcm_timeout3| l1))) (let ((l11 (and l9 l10))) (let ((l12 (= |state.y3| 0))) (let ((l13 (= |state.pre_y3| 0))) (let ((l14 (<= 0 |state.mvs_timeout1|))) (let ((l15 (/ 1 20))) (let ((l16 (< |state.mvs_timeout1| l15))) (let ((l17 (and l14 l16))) (let ((l18 (= |state.mvs1| 0))) (let ((l19 (<= 0 |state.mvs_timeout2|))) (let ((l20 (< |state.mvs_timeout2| l15))) (let ((l21 (and l19 l20))) (let ((l22 (= |state.mvs2| 0))) (let ((l23 (= |state.time| 0))) (let ((l24 (= |state.x| 0))) (let ((l25 (= |state.x_prev| 0))) (let ((l26 (= |state.time_prev| 0))) (let ((l27 (and l3 l4 l5 l8 l11 l12 l13 l17 l18 l21 l22 l23 l24 l25 l26))) (let ((l28 (= |state.c1_b1| true))) (let ((l29 (= |state.c1_b3| true))) (let ((l30 (= |state.c2_b1| true))) (let ((l31 (= |state.c2_b3| true))) (let ((l32 (and l28 l29 l30 l31))) (let ((l33 (and l27 l32))) l33))))))))))))))))))))))))))))))))))
        (invariant state.c1_b1 state.c1_b2 state.c1_b3 state.c2_b1 state.c2_b2 state.c2_b3 state.fcm_timeout1 state.fcm_timeout2 state.fcm_timeout3 state.mvs1 state.mvs2 state.mvs_timeout1 state.mvs_timeout2 state.pre_y1 state.pre_y3 state.time state.time_prev state.x state.x_prev state.y1 state.y2 state.y3))
  )
)

;; Transition relation
(assert
  (forall ((state.c1_b1 Bool) (next.c1_b1 Bool) (state.c1_b2 Bool) (next.c1_b2 Bool) (state.c1_b3 Bool) (next.c1_b3 Bool) (state.c2_b1 Bool) (next.c2_b1 Bool) (state.c2_b2 Bool) (next.c2_b2 Bool) (state.c2_b3 Bool) (next.c2_b3 Bool) (state.fcm_timeout1 Real) (next.fcm_timeout1 Real) (state.fcm_timeout2 Real) (next.fcm_timeout2 Real) (state.fcm_timeout3 Real) (next.fcm_timeout3 Real) (state.mvs1 Real) (next.mvs1 Real) (state.mvs2 Real) (next.mvs2 Real) (state.mvs_timeout1 Real) (next.mvs_timeout1 Real) (state.mvs_timeout2 Real) (next.mvs_timeout2 Real) (state.pre_y1 Real) (next.pre_y1 Real) (state.pre_y3 Real) (next.pre_y3 Real) (state.time Real) (next.time Real) (state.time_prev Real) (next.time_prev Real) (state.x Real) (next.x Real) (state.x_prev Real) (next.x_prev Real) (state.y1 Real) (next.y1 Real) (state.y2 Real) (next.y2 Real) (state.y3 Real) (next.y3 Real))
    (=> (and (invariant state.c1_b1 state.c1_b2 state.c1_b3 state.c2_b1 state.c2_b2 state.c2_b3 state.fcm_timeout1 state.fcm_timeout2 state.fcm_timeout3 state.mvs1 state.mvs2 state.mvs_timeout1 state.mvs_timeout2 state.pre_y1 state.pre_y3 state.time state.time_prev state.x state.x_prev state.y1 state.y2 state.y3)
             (let ((l0 (= |state.time| |state.fcm_timeout1|))) (let ((l1 (/ 1 5))) (let ((l2 (+ |state.time| l1))) (let ((l3 (= |next.fcm_timeout1| l2))) (let ((l4 (= |next.y1| |next.x|))) (let ((l5 (= |next.pre_y1| |state.y1|))) (let ((l6 (and l0 l3 l4 l5))) (let ((l7 (not l0))) (let ((l8 (= |next.pre_y1| |state.pre_y1|))) (let ((l9 (= |next.fcm_timeout1| |state.fcm_timeout1|))) (let ((l10 (= |next.y1| |state.y1|))) (let ((l11 (and l7 l8 l9 l10))) (let ((l12 (or l6 l11))) (let ((l13 (= |state.time| |state.fcm_timeout2|))) (let ((l14 (/ 1 1000))) (let ((l15 (+ |state.time| l14))) (let ((l16 (<= l15 |next.fcm_timeout2|))) (let ((l17 (and l13 l16 true))) (let ((l18 (not l13))) (let ((l19 (= |next.fcm_timeout2| |state.fcm_timeout2|))) (let ((l20 (= |next.y2| |state.y2|))) (let ((l21 (and l18 l19 l20))) (let ((l22 (or l17 l21))) (let ((l23 (= |state.time| |state.fcm_timeout3|))) (let ((l24 (= |next.fcm_timeout3| l2))) (let ((l25 (= |next.y3| |next.x|))) (let ((l26 (= |next.pre_y3| |state.y3|))) (let ((l27 (and l23 l24 l25 l26))) (let ((l28 (not l23))) (let ((l29 (= |next.pre_y3| |state.pre_y3|))) (let ((l30 (= |next.fcm_timeout3| |state.fcm_timeout3|))) (let ((l31 (= |next.y3| |state.y3|))) (let ((l32 (and l28 l29 l30 l31))) (let ((l33 (or l27 l32))) (let ((l34 (= |state.time| |state.mvs_timeout1|))) (let ((l35 (/ 1 20))) (let ((l36 (+ |state.time| l35))) (let ((l37 (= |next.mvs_timeout1| l36))) (let ((l38 (ite |next.c1_b2| |next.y2| |state.mvs1|))) (let ((l39 (<= |next.y1| l38))) (let ((l40 (<= l38 |next.y3|))) (let ((l41 (<= |next.y1| |next.y3|))) (let ((l42 (ite l41 |next.y3| |next.y1|))) (let ((l43 (ite l40 l38 l42))) (let ((l44 (ite l40 |next.y3| l38))) (let ((l45 (ite l41 |next.y1| l44))) (let ((l46 (ite l39 l43 l45))) (let ((l47 (= |next.mvs1| l46))) (let ((l48 (and l34 l37 l47))) (let ((l49 (not l34))) (let ((l50 (= |next.mvs1| |state.mvs1|))) (let ((l51 (= |next.mvs_timeout1| |state.mvs_timeout1|))) (let ((l52 (and l49 l50 l51))) (let ((l53 (or l48 l52))) (let ((l54 (= |state.time| |state.mvs_timeout2|))) (let ((l55 (= |next.mvs_timeout2| l36))) (let ((l56 (ite |next.c2_b2| |next.y2| |state.mvs2|))) (let ((l57 (<= |next.y1| l56))) (let ((l58 (<= l56 |next.y3|))) (let ((l59 (ite l58 l56 l42))) (let ((l60 (ite l58 |next.y3| l56))) (let ((l61 (ite l41 |next.y1| l60))) (let ((l62 (ite l57 l59 l61))) (let ((l63 (= |next.mvs2| l62))) (let ((l64 (and l54 l55 l63))) (let ((l65 (not l54))) (let ((l66 (= |next.mvs2| |state.mvs2|))) (let ((l67 (= |next.mvs_timeout2| |state.mvs_timeout2|))) (let ((l68 (and l65 l66 l67))) (let ((l69 (or l64 l68))) (let ((l70 (= |next.time| |state.time|))) (let ((l71 (= |next.x_prev| |state.x_prev|))) (let ((l72 (= |next.time_prev| |state.time_prev|))) (let ((l73 (= |next.x| |state.x|))) (let ((l74 (and l12 l22 l33 l53 l69 l70 l71 l72 l73))) (let ((l75 (< |state.time| |state.fcm_timeout1|))) (let ((l76 (< |state.time| |state.fcm_timeout2|))) (let ((l77 (< |state.time| |state.fcm_timeout3|))) (let ((l78 (< |state.time| |state.mvs_timeout1|))) (let ((l79 (< |state.time| |state.mvs_timeout2|))) (let ((l80 (<= |next.time| |state.fcm_timeout1|))) (let ((l81 (<= |next.time| |state.fcm_timeout2|))) (let ((l82 (<= |next.time| |state.fcm_timeout3|))) (let ((l83 (<= |next.time| |state.mvs_timeout1|))) (let ((l84 (<= |next.time| |state.mvs_timeout2|))) (let ((l85 (= |next.time| |state.fcm_timeout1|))) (let ((l86 (= |next.time| |state.fcm_timeout2|))) (let ((l87 (= |next.time| |state.fcm_timeout3|))) (let ((l88 (= |next.time| |state.mvs_timeout1|))) (let ((l89 (= |next.time| |state.mvs_timeout2|))) (let ((l90 (or l85 l86 l87 l88 l89))) (let ((l91 (and l80 l81 l82 l83 l84 l90))) (let ((l92 (- |next.x| |state.x_prev|))) (let ((l93 (< l92 0))) (let ((l94 (- 0 l92))) (let ((l95 (ite l93 l94 l92))) (let ((l96 (- |state.time| |state.time_prev|))) (let ((l97 (< l96 0))) (let ((l98 (- 0 l96))) (let ((l99 (ite l97 l98 l96))) (let ((l100 (<= l95 l99))) (let ((l101 (= |next.time_prev| |state.time|))) (let ((l102 (= |next.x_prev| |state.x|))) (let ((l103 (and l75 l76 l77 l78 l79 l91 l100 l101 l102 l8 l10 l9 l20 l19 l29 l31 l30 l50 l51 l66 l67))) (let ((l104 (or l74 l103))) (let ((l105 (= |state.c1_b1| true))) (let ((l106 (= |state.c1_b3| true))) (let ((l107 (= |state.c2_b1| true))) (let ((l108 (= |state.c2_b3| true))) (let ((l109 (and l105 l106 l107 l108))) (let ((l110 (= |next.c1_b1| true))) (let ((l111 (= |next.c1_b3| true))) (let ((l112 (= |next.c2_b1| true))) (let ((l113 (= |next.c2_b3| true))) (let ((l114 (and l110 l111 l112 l113))) (let ((l115 (and l104 l109 l114))) l115))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
        )
        (invariant next.c1_b1 next.c1_b2 next.c1_b3 next.c2_b1 next.c2_b2 next.c2_b3 next.fcm_timeout1 next.fcm_timeout2 next.fcm_timeout3 next.mvs1 next.mvs2 next.mvs_timeout1 next.mvs_timeout2 next.pre_y1 next.pre_y3 next.time next.time_prev next.x next.x_prev next.y1 next.y2 next.y3)
    )
  )
)

;; Property
(assert
  (forall ((state.c1_b1 Bool) (state.c1_b2 Bool) (state.c1_b3 Bool) (state.c2_b1 Bool) (state.c2_b2 Bool) (state.c2_b3 Bool) (state.fcm_timeout1 Real) (state.fcm_timeout2 Real) (state.fcm_timeout3 Real) (state.mvs1 Real) (state.mvs2 Real) (state.mvs_timeout1 Real) (state.mvs_timeout2 Real) (state.pre_y1 Real) (state.pre_y3 Real) (state.time Real) (state.time_prev Real) (state.x Real) (state.x_prev Real) (state.y1 Real) (state.y2 Real) (state.y3 Real))
    (=> (invariant state.c1_b1 state.c1_b2 state.c1_b3 state.c2_b1 state.c2_b2 state.c2_b3 state.fcm_timeout1 state.fcm_timeout2 state.fcm_timeout3 state.mvs1 state.mvs2 state.mvs_timeout1 state.mvs_timeout2 state.pre_y1 state.pre_y3 state.time state.time_prev state.x state.x_prev state.y1 state.y2 state.y3)
        (let ((l0 (- |state.mvs1| |state.mvs2|))) (let ((l1 (/ 1 4))) (let ((l2 (<= l0 l1))) (let ((l3 (- |state.mvs2| |state.mvs1|))) (let ((l4 (<= l3 l1))) (let ((l5 (and l2 l4))) l5))))))
    )
  )
)

;; Check the property
(check-sat)
